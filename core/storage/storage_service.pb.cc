// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage_service.proto

#include "storage_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace storage_service {
PROTOBUF_CONSTEXPR LogWriteRequest_PageID::LogWriteRequest_PageID(
    ::_pbi::ConstantInitialized)
  : table_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , page_no_(0){}
struct LogWriteRequest_PageIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogWriteRequest_PageIDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogWriteRequest_PageIDDefaultTypeInternal() {}
  union {
    LogWriteRequest_PageID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogWriteRequest_PageIDDefaultTypeInternal _LogWriteRequest_PageID_default_instance_;
PROTOBUF_CONSTEXPR LogWriteRequest::LogWriteRequest(
    ::_pbi::ConstantInitialized)
  : page_id_()
  , log_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct LogWriteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogWriteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogWriteRequestDefaultTypeInternal() {}
  union {
    LogWriteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogWriteRequestDefaultTypeInternal _LogWriteRequest_default_instance_;
PROTOBUF_CONSTEXPR LogWriteResponse::LogWriteResponse(
    ::_pbi::ConstantInitialized){}
struct LogWriteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogWriteResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogWriteResponseDefaultTypeInternal() {}
  union {
    LogWriteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogWriteResponseDefaultTypeInternal _LogWriteResponse_default_instance_;
PROTOBUF_CONSTEXPR GetPageRequest_PageID::GetPageRequest_PageID(
    ::_pbi::ConstantInitialized)
  : table_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , page_no_(0){}
struct GetPageRequest_PageIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPageRequest_PageIDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPageRequest_PageIDDefaultTypeInternal() {}
  union {
    GetPageRequest_PageID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPageRequest_PageIDDefaultTypeInternal _GetPageRequest_PageID_default_instance_;
PROTOBUF_CONSTEXPR GetPageRequest::GetPageRequest(
    ::_pbi::ConstantInitialized)
  : page_id_()
  , require_batch_id_(uint64_t{0u}){}
struct GetPageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPageRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPageRequestDefaultTypeInternal() {}
  union {
    GetPageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPageRequestDefaultTypeInternal _GetPageRequest_default_instance_;
PROTOBUF_CONSTEXPR GetPageResponse::GetPageResponse(
    ::_pbi::ConstantInitialized)
  : data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetPageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPageResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPageResponseDefaultTypeInternal() {}
  union {
    GetPageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPageResponseDefaultTypeInternal _GetPageResponse_default_instance_;
}  // namespace storage_service
static ::_pb::Metadata file_level_metadata_storage_5fservice_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_storage_5fservice_2eproto = nullptr;
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_storage_5fservice_2eproto[1];

const uint32_t TableStruct_storage_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::storage_service::LogWriteRequest_PageID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::storage_service::LogWriteRequest_PageID, table_name_),
  PROTOBUF_FIELD_OFFSET(::storage_service::LogWriteRequest_PageID, page_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::storage_service::LogWriteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::storage_service::LogWriteRequest, log_),
  PROTOBUF_FIELD_OFFSET(::storage_service::LogWriteRequest, page_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::storage_service::LogWriteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::storage_service::GetPageRequest_PageID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::storage_service::GetPageRequest_PageID, table_name_),
  PROTOBUF_FIELD_OFFSET(::storage_service::GetPageRequest_PageID, page_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::storage_service::GetPageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::storage_service::GetPageRequest, page_id_),
  PROTOBUF_FIELD_OFFSET(::storage_service::GetPageRequest, require_batch_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::storage_service::GetPageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::storage_service::GetPageResponse, data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::storage_service::LogWriteRequest_PageID)},
  { 8, -1, -1, sizeof(::storage_service::LogWriteRequest)},
  { 16, -1, -1, sizeof(::storage_service::LogWriteResponse)},
  { 22, -1, -1, sizeof(::storage_service::GetPageRequest_PageID)},
  { 30, -1, -1, sizeof(::storage_service::GetPageRequest)},
  { 38, -1, -1, sizeof(::storage_service::GetPageResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::storage_service::_LogWriteRequest_PageID_default_instance_._instance,
  &::storage_service::_LogWriteRequest_default_instance_._instance,
  &::storage_service::_LogWriteResponse_default_instance_._instance,
  &::storage_service::_GetPageRequest_PageID_default_instance_._instance,
  &::storage_service::_GetPageRequest_default_instance_._instance,
  &::storage_service::_GetPageResponse_default_instance_._instance,
};

const char descriptor_table_protodef_storage_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025storage_service.proto\022\017storage_service"
  "\"\207\001\n\017LogWriteRequest\022\013\n\003log\030\001 \001(\014\0228\n\007pag"
  "e_id\030\002 \003(\0132\'.storage_service.LogWriteReq"
  "uest.PageID\032-\n\006PageID\022\022\n\ntable_name\030\001 \001("
  "\014\022\017\n\007page_no\030\002 \001(\021\"\022\n\020LogWriteResponse\"\222"
  "\001\n\016GetPageRequest\0227\n\007page_id\030\001 \003(\0132&.sto"
  "rage_service.GetPageRequest.PageID\022\030\n\020re"
  "quire_batch_id\030\002 \001(\004\032-\n\006PageID\022\022\n\ntable_"
  "name\030\001 \001(\014\022\017\n\007page_no\030\002 \001(\021\"\037\n\017GetPageRe"
  "sponse\022\014\n\004data\030\001 \001(\0142\257\001\n\016StorageService\022"
  "O\n\010LogWrite\022 .storage_service.LogWriteRe"
  "quest\032!.storage_service.LogWriteResponse"
  "\022L\n\007GetPage\022\037.storage_service.GetPageReq"
  "uest\032 .storage_service.GetPageResponseB\003"
  "\200\001\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_storage_5fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_storage_5fservice_2eproto = {
    false, false, 571, descriptor_table_protodef_storage_5fservice_2eproto,
    "storage_service.proto",
    &descriptor_table_storage_5fservice_2eproto_once, nullptr, 0, 6,
    schemas, file_default_instances, TableStruct_storage_5fservice_2eproto::offsets,
    file_level_metadata_storage_5fservice_2eproto, file_level_enum_descriptors_storage_5fservice_2eproto,
    file_level_service_descriptors_storage_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_storage_5fservice_2eproto_getter() {
  return &descriptor_table_storage_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_storage_5fservice_2eproto(&descriptor_table_storage_5fservice_2eproto);
namespace storage_service {

// ===================================================================

class LogWriteRequest_PageID::_Internal {
 public:
};

LogWriteRequest_PageID::LogWriteRequest_PageID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:storage_service.LogWriteRequest.PageID)
}
LogWriteRequest_PageID::LogWriteRequest_PageID(const LogWriteRequest_PageID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    table_name_.Set(from._internal_table_name(), 
      GetArenaForAllocation());
  }
  page_no_ = from.page_no_;
  // @@protoc_insertion_point(copy_constructor:storage_service.LogWriteRequest.PageID)
}

inline void LogWriteRequest_PageID::SharedCtor() {
table_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  table_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
page_no_ = 0;
}

LogWriteRequest_PageID::~LogWriteRequest_PageID() {
  // @@protoc_insertion_point(destructor:storage_service.LogWriteRequest.PageID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogWriteRequest_PageID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  table_name_.Destroy();
}

void LogWriteRequest_PageID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogWriteRequest_PageID::Clear() {
// @@protoc_insertion_point(message_clear_start:storage_service.LogWriteRequest.PageID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_name_.ClearToEmpty();
  page_no_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogWriteRequest_PageID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes table_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 page_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          page_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogWriteRequest_PageID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:storage_service.LogWriteRequest.PageID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes table_name = 1;
  if (!this->_internal_table_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_table_name(), target);
  }

  // sint32 page_no = 2;
  if (this->_internal_page_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_page_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storage_service.LogWriteRequest.PageID)
  return target;
}

size_t LogWriteRequest_PageID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storage_service.LogWriteRequest.PageID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes table_name = 1;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_table_name());
  }

  // sint32 page_no = 2;
  if (this->_internal_page_no() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_page_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogWriteRequest_PageID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LogWriteRequest_PageID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogWriteRequest_PageID::GetClassData() const { return &_class_data_; }

void LogWriteRequest_PageID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LogWriteRequest_PageID *>(to)->MergeFrom(
      static_cast<const LogWriteRequest_PageID &>(from));
}


void LogWriteRequest_PageID::MergeFrom(const LogWriteRequest_PageID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storage_service.LogWriteRequest.PageID)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_table_name().empty()) {
    _internal_set_table_name(from._internal_table_name());
  }
  if (from._internal_page_no() != 0) {
    _internal_set_page_no(from._internal_page_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogWriteRequest_PageID::CopyFrom(const LogWriteRequest_PageID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storage_service.LogWriteRequest.PageID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogWriteRequest_PageID::IsInitialized() const {
  return true;
}

void LogWriteRequest_PageID::InternalSwap(LogWriteRequest_PageID* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &table_name_, lhs_arena,
      &other->table_name_, rhs_arena
  );
  swap(page_no_, other->page_no_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogWriteRequest_PageID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_storage_5fservice_2eproto_getter, &descriptor_table_storage_5fservice_2eproto_once,
      file_level_metadata_storage_5fservice_2eproto[0]);
}

// ===================================================================

class LogWriteRequest::_Internal {
 public:
};

LogWriteRequest::LogWriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  page_id_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:storage_service.LogWriteRequest)
}
LogWriteRequest::LogWriteRequest(const LogWriteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      page_id_(from.page_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  log_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    log_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_log().empty()) {
    log_.Set(from._internal_log(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:storage_service.LogWriteRequest)
}

inline void LogWriteRequest::SharedCtor() {
log_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  log_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogWriteRequest::~LogWriteRequest() {
  // @@protoc_insertion_point(destructor:storage_service.LogWriteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogWriteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  log_.Destroy();
}

void LogWriteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LogWriteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:storage_service.LogWriteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_id_.Clear();
  log_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogWriteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes log = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_log();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .storage_service.LogWriteRequest.PageID page_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_page_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogWriteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:storage_service.LogWriteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes log = 1;
  if (!this->_internal_log().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_log(), target);
  }

  // repeated .storage_service.LogWriteRequest.PageID page_id = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_page_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_page_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storage_service.LogWriteRequest)
  return target;
}

size_t LogWriteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storage_service.LogWriteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .storage_service.LogWriteRequest.PageID page_id = 2;
  total_size += 1UL * this->_internal_page_id_size();
  for (const auto& msg : this->page_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes log = 1;
  if (!this->_internal_log().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_log());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogWriteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LogWriteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogWriteRequest::GetClassData() const { return &_class_data_; }

void LogWriteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LogWriteRequest *>(to)->MergeFrom(
      static_cast<const LogWriteRequest &>(from));
}


void LogWriteRequest::MergeFrom(const LogWriteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storage_service.LogWriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  page_id_.MergeFrom(from.page_id_);
  if (!from._internal_log().empty()) {
    _internal_set_log(from._internal_log());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogWriteRequest::CopyFrom(const LogWriteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storage_service.LogWriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogWriteRequest::IsInitialized() const {
  return true;
}

void LogWriteRequest::InternalSwap(LogWriteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  page_id_.InternalSwap(&other->page_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &log_, lhs_arena,
      &other->log_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata LogWriteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_storage_5fservice_2eproto_getter, &descriptor_table_storage_5fservice_2eproto_once,
      file_level_metadata_storage_5fservice_2eproto[1]);
}

// ===================================================================

class LogWriteResponse::_Internal {
 public:
};

LogWriteResponse::LogWriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:storage_service.LogWriteResponse)
}
LogWriteResponse::LogWriteResponse(const LogWriteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:storage_service.LogWriteResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogWriteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogWriteResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata LogWriteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_storage_5fservice_2eproto_getter, &descriptor_table_storage_5fservice_2eproto_once,
      file_level_metadata_storage_5fservice_2eproto[2]);
}

// ===================================================================

class GetPageRequest_PageID::_Internal {
 public:
};

GetPageRequest_PageID::GetPageRequest_PageID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:storage_service.GetPageRequest.PageID)
}
GetPageRequest_PageID::GetPageRequest_PageID(const GetPageRequest_PageID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    table_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    table_name_.Set(from._internal_table_name(), 
      GetArenaForAllocation());
  }
  page_no_ = from.page_no_;
  // @@protoc_insertion_point(copy_constructor:storage_service.GetPageRequest.PageID)
}

inline void GetPageRequest_PageID::SharedCtor() {
table_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  table_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
page_no_ = 0;
}

GetPageRequest_PageID::~GetPageRequest_PageID() {
  // @@protoc_insertion_point(destructor:storage_service.GetPageRequest.PageID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPageRequest_PageID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  table_name_.Destroy();
}

void GetPageRequest_PageID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPageRequest_PageID::Clear() {
// @@protoc_insertion_point(message_clear_start:storage_service.GetPageRequest.PageID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_name_.ClearToEmpty();
  page_no_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPageRequest_PageID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes table_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_table_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // sint32 page_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          page_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPageRequest_PageID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:storage_service.GetPageRequest.PageID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes table_name = 1;
  if (!this->_internal_table_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_table_name(), target);
  }

  // sint32 page_no = 2;
  if (this->_internal_page_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt32ToArray(2, this->_internal_page_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storage_service.GetPageRequest.PageID)
  return target;
}

size_t GetPageRequest_PageID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storage_service.GetPageRequest.PageID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes table_name = 1;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_table_name());
  }

  // sint32 page_no = 2;
  if (this->_internal_page_no() != 0) {
    total_size += ::_pbi::WireFormatLite::SInt32SizePlusOne(this->_internal_page_no());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPageRequest_PageID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPageRequest_PageID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPageRequest_PageID::GetClassData() const { return &_class_data_; }

void GetPageRequest_PageID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetPageRequest_PageID *>(to)->MergeFrom(
      static_cast<const GetPageRequest_PageID &>(from));
}


void GetPageRequest_PageID::MergeFrom(const GetPageRequest_PageID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storage_service.GetPageRequest.PageID)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_table_name().empty()) {
    _internal_set_table_name(from._internal_table_name());
  }
  if (from._internal_page_no() != 0) {
    _internal_set_page_no(from._internal_page_no());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPageRequest_PageID::CopyFrom(const GetPageRequest_PageID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storage_service.GetPageRequest.PageID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPageRequest_PageID::IsInitialized() const {
  return true;
}

void GetPageRequest_PageID::InternalSwap(GetPageRequest_PageID* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &table_name_, lhs_arena,
      &other->table_name_, rhs_arena
  );
  swap(page_no_, other->page_no_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPageRequest_PageID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_storage_5fservice_2eproto_getter, &descriptor_table_storage_5fservice_2eproto_once,
      file_level_metadata_storage_5fservice_2eproto[3]);
}

// ===================================================================

class GetPageRequest::_Internal {
 public:
};

GetPageRequest::GetPageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  page_id_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:storage_service.GetPageRequest)
}
GetPageRequest::GetPageRequest(const GetPageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      page_id_(from.page_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  require_batch_id_ = from.require_batch_id_;
  // @@protoc_insertion_point(copy_constructor:storage_service.GetPageRequest)
}

inline void GetPageRequest::SharedCtor() {
require_batch_id_ = uint64_t{0u};
}

GetPageRequest::~GetPageRequest() {
  // @@protoc_insertion_point(destructor:storage_service.GetPageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetPageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:storage_service.GetPageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_id_.Clear();
  require_batch_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .storage_service.GetPageRequest.PageID page_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_page_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 require_batch_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          require_batch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:storage_service.GetPageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .storage_service.GetPageRequest.PageID page_id = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_page_id_size()); i < n; i++) {
    const auto& repfield = this->_internal_page_id(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // uint64 require_batch_id = 2;
  if (this->_internal_require_batch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_require_batch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storage_service.GetPageRequest)
  return target;
}

size_t GetPageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storage_service.GetPageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .storage_service.GetPageRequest.PageID page_id = 1;
  total_size += 1UL * this->_internal_page_id_size();
  for (const auto& msg : this->page_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 require_batch_id = 2;
  if (this->_internal_require_batch_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_require_batch_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPageRequest::GetClassData() const { return &_class_data_; }

void GetPageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetPageRequest *>(to)->MergeFrom(
      static_cast<const GetPageRequest &>(from));
}


void GetPageRequest::MergeFrom(const GetPageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storage_service.GetPageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  page_id_.MergeFrom(from.page_id_);
  if (from._internal_require_batch_id() != 0) {
    _internal_set_require_batch_id(from._internal_require_batch_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPageRequest::CopyFrom(const GetPageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storage_service.GetPageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPageRequest::IsInitialized() const {
  return true;
}

void GetPageRequest::InternalSwap(GetPageRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  page_id_.InternalSwap(&other->page_id_);
  swap(require_batch_id_, other->require_batch_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_storage_5fservice_2eproto_getter, &descriptor_table_storage_5fservice_2eproto_once,
      file_level_metadata_storage_5fservice_2eproto[4]);
}

// ===================================================================

class GetPageResponse::_Internal {
 public:
};

GetPageResponse::GetPageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:storage_service.GetPageResponse)
}
GetPageResponse::GetPageResponse(const GetPageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:storage_service.GetPageResponse)
}

inline void GetPageResponse::SharedCtor() {
data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetPageResponse::~GetPageResponse() {
  // @@protoc_insertion_point(destructor:storage_service.GetPageResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.Destroy();
}

void GetPageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:storage_service.GetPageResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPageResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPageResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:storage_service.GetPageResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storage_service.GetPageResponse)
  return target;
}

size_t GetPageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storage_service.GetPageResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPageResponse::GetClassData() const { return &_class_data_; }

void GetPageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetPageResponse *>(to)->MergeFrom(
      static_cast<const GetPageResponse &>(from));
}


void GetPageResponse::MergeFrom(const GetPageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storage_service.GetPageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPageResponse::CopyFrom(const GetPageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storage_service.GetPageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPageResponse::IsInitialized() const {
  return true;
}

void GetPageResponse::InternalSwap(GetPageResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_storage_5fservice_2eproto_getter, &descriptor_table_storage_5fservice_2eproto_once,
      file_level_metadata_storage_5fservice_2eproto[5]);
}

// ===================================================================

StorageService::~StorageService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* StorageService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_storage_5fservice_2eproto);
  return file_level_service_descriptors_storage_5fservice_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* StorageService::GetDescriptor() {
  return descriptor();
}

void StorageService::LogWrite(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::storage_service::LogWriteRequest*,
                         ::storage_service::LogWriteResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method LogWrite() not implemented.");
  done->Run();
}

void StorageService::GetPage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::storage_service::GetPageRequest*,
                         ::storage_service::GetPageResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetPage() not implemented.");
  done->Run();
}

void StorageService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_storage_5fservice_2eproto[0]);
  switch(method->index()) {
    case 0:
      LogWrite(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::storage_service::LogWriteRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::storage_service::LogWriteResponse*>(
                 response),
             done);
      break;
    case 1:
      GetPage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::storage_service::GetPageRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::storage_service::GetPageResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& StorageService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::storage_service::LogWriteRequest::default_instance();
    case 1:
      return ::storage_service::GetPageRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& StorageService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::storage_service::LogWriteResponse::default_instance();
    case 1:
      return ::storage_service::GetPageResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

StorageService_Stub::StorageService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
StorageService_Stub::StorageService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
StorageService_Stub::~StorageService_Stub() {
  if (owns_channel_) delete channel_;
}

void StorageService_Stub::LogWrite(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::storage_service::LogWriteRequest* request,
                              ::storage_service::LogWriteResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void StorageService_Stub::GetPage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::storage_service::GetPageRequest* request,
                              ::storage_service::GetPageResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace storage_service
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::storage_service::LogWriteRequest_PageID*
Arena::CreateMaybeMessage< ::storage_service::LogWriteRequest_PageID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::storage_service::LogWriteRequest_PageID >(arena);
}
template<> PROTOBUF_NOINLINE ::storage_service::LogWriteRequest*
Arena::CreateMaybeMessage< ::storage_service::LogWriteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::storage_service::LogWriteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::storage_service::LogWriteResponse*
Arena::CreateMaybeMessage< ::storage_service::LogWriteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::storage_service::LogWriteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::storage_service::GetPageRequest_PageID*
Arena::CreateMaybeMessage< ::storage_service::GetPageRequest_PageID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::storage_service::GetPageRequest_PageID >(arena);
}
template<> PROTOBUF_NOINLINE ::storage_service::GetPageRequest*
Arena::CreateMaybeMessage< ::storage_service::GetPageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::storage_service::GetPageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::storage_service::GetPageResponse*
Arena::CreateMaybeMessage< ::storage_service::GetPageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::storage_service::GetPageResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
