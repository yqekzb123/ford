// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage_service.proto

#include "storage_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_storage_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPageRequest_PageID_storage_5fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_storage_5fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogWriteRequest_PageID_storage_5fservice_2eproto;
namespace storage_service {
class LogWriteRequest_PageIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogWriteRequest_PageID> _instance;
} _LogWriteRequest_PageID_default_instance_;
class LogWriteRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogWriteRequest> _instance;
} _LogWriteRequest_default_instance_;
class LogWriteResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogWriteResponse> _instance;
} _LogWriteResponse_default_instance_;
class GetPageRequest_PageIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPageRequest_PageID> _instance;
} _GetPageRequest_PageID_default_instance_;
class GetPageRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPageRequest> _instance;
} _GetPageRequest_default_instance_;
class GetPageResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetPageResponse> _instance;
} _GetPageResponse_default_instance_;
}  // namespace storage_service
static void InitDefaultsscc_info_GetPageRequest_storage_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::storage_service::_GetPageRequest_default_instance_;
    new (ptr) ::storage_service::GetPageRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::storage_service::GetPageRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetPageRequest_storage_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetPageRequest_storage_5fservice_2eproto}, {
      &scc_info_GetPageRequest_PageID_storage_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_GetPageRequest_PageID_storage_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::storage_service::_GetPageRequest_PageID_default_instance_;
    new (ptr) ::storage_service::GetPageRequest_PageID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::storage_service::GetPageRequest_PageID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPageRequest_PageID_storage_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetPageRequest_PageID_storage_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_GetPageResponse_storage_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::storage_service::_GetPageResponse_default_instance_;
    new (ptr) ::storage_service::GetPageResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::storage_service::GetPageResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetPageResponse_storage_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetPageResponse_storage_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_LogWriteRequest_storage_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::storage_service::_LogWriteRequest_default_instance_;
    new (ptr) ::storage_service::LogWriteRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::storage_service::LogWriteRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogWriteRequest_storage_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LogWriteRequest_storage_5fservice_2eproto}, {
      &scc_info_LogWriteRequest_PageID_storage_5fservice_2eproto.base,}};

static void InitDefaultsscc_info_LogWriteRequest_PageID_storage_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::storage_service::_LogWriteRequest_PageID_default_instance_;
    new (ptr) ::storage_service::LogWriteRequest_PageID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::storage_service::LogWriteRequest_PageID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogWriteRequest_PageID_storage_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogWriteRequest_PageID_storage_5fservice_2eproto}, {}};

static void InitDefaultsscc_info_LogWriteResponse_storage_5fservice_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::storage_service::_LogWriteResponse_default_instance_;
    new (ptr) ::storage_service::LogWriteResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::storage_service::LogWriteResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogWriteResponse_storage_5fservice_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogWriteResponse_storage_5fservice_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_storage_5fservice_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_storage_5fservice_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_storage_5fservice_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_storage_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::storage_service::LogWriteRequest_PageID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::storage_service::LogWriteRequest_PageID, table_name_),
  PROTOBUF_FIELD_OFFSET(::storage_service::LogWriteRequest_PageID, page_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::storage_service::LogWriteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::storage_service::LogWriteRequest, log_),
  PROTOBUF_FIELD_OFFSET(::storage_service::LogWriteRequest, page_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::storage_service::LogWriteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::storage_service::GetPageRequest_PageID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::storage_service::GetPageRequest_PageID, table_name_),
  PROTOBUF_FIELD_OFFSET(::storage_service::GetPageRequest_PageID, page_no_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::storage_service::GetPageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::storage_service::GetPageRequest, page_id_),
  PROTOBUF_FIELD_OFFSET(::storage_service::GetPageRequest, require_batch_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::storage_service::GetPageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::storage_service::GetPageResponse, data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::storage_service::LogWriteRequest_PageID)},
  { 7, -1, sizeof(::storage_service::LogWriteRequest)},
  { 14, -1, sizeof(::storage_service::LogWriteResponse)},
  { 19, -1, sizeof(::storage_service::GetPageRequest_PageID)},
  { 26, -1, sizeof(::storage_service::GetPageRequest)},
  { 33, -1, sizeof(::storage_service::GetPageResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::storage_service::_LogWriteRequest_PageID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::storage_service::_LogWriteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::storage_service::_LogWriteResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::storage_service::_GetPageRequest_PageID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::storage_service::_GetPageRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::storage_service::_GetPageResponse_default_instance_),
};

const char descriptor_table_protodef_storage_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025storage_service.proto\022\017storage_service"
  "\"\207\001\n\017LogWriteRequest\022\013\n\003log\030\001 \001(\014\0228\n\007pag"
  "e_id\030\002 \003(\0132\'.storage_service.LogWriteReq"
  "uest.PageID\032-\n\006PageID\022\022\n\ntable_name\030\001 \001("
  "\014\022\017\n\007page_no\030\002 \001(\021\"\022\n\020LogWriteResponse\"\222"
  "\001\n\016GetPageRequest\0227\n\007page_id\030\001 \003(\0132&.sto"
  "rage_service.GetPageRequest.PageID\022\030\n\020re"
  "quire_batch_id\030\002 \001(\004\032-\n\006PageID\022\022\n\ntable_"
  "name\030\001 \001(\014\022\017\n\007page_no\030\002 \001(\021\"\037\n\017GetPageRe"
  "sponse\022\014\n\004data\030\001 \001(\0142\257\001\n\016StorageService\022"
  "O\n\010LogWrite\022 .storage_service.LogWriteRe"
  "quest\032!.storage_service.LogWriteResponse"
  "\022L\n\007GetPage\022\037.storage_service.GetPageReq"
  "uest\032 .storage_service.GetPageResponseB\003"
  "\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_storage_5fservice_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_storage_5fservice_2eproto_sccs[6] = {
  &scc_info_GetPageRequest_storage_5fservice_2eproto.base,
  &scc_info_GetPageRequest_PageID_storage_5fservice_2eproto.base,
  &scc_info_GetPageResponse_storage_5fservice_2eproto.base,
  &scc_info_LogWriteRequest_storage_5fservice_2eproto.base,
  &scc_info_LogWriteRequest_PageID_storage_5fservice_2eproto.base,
  &scc_info_LogWriteResponse_storage_5fservice_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_storage_5fservice_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_storage_5fservice_2eproto = {
  false, false, descriptor_table_protodef_storage_5fservice_2eproto, "storage_service.proto", 571,
  &descriptor_table_storage_5fservice_2eproto_once, descriptor_table_storage_5fservice_2eproto_sccs, descriptor_table_storage_5fservice_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_storage_5fservice_2eproto::offsets,
  file_level_metadata_storage_5fservice_2eproto, 6, file_level_enum_descriptors_storage_5fservice_2eproto, file_level_service_descriptors_storage_5fservice_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_storage_5fservice_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_storage_5fservice_2eproto)), true);
namespace storage_service {

// ===================================================================

void LogWriteRequest_PageID::InitAsDefaultInstance() {
}
class LogWriteRequest_PageID::_Internal {
 public:
};

LogWriteRequest_PageID::LogWriteRequest_PageID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:storage_service.LogWriteRequest.PageID)
}
LogWriteRequest_PageID::LogWriteRequest_PageID(const LogWriteRequest_PageID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_table_name().empty()) {
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_table_name(),
      GetArena());
  }
  page_no_ = from.page_no_;
  // @@protoc_insertion_point(copy_constructor:storage_service.LogWriteRequest.PageID)
}

void LogWriteRequest_PageID::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogWriteRequest_PageID_storage_5fservice_2eproto.base);
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_no_ = 0;
}

LogWriteRequest_PageID::~LogWriteRequest_PageID() {
  // @@protoc_insertion_point(destructor:storage_service.LogWriteRequest.PageID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogWriteRequest_PageID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogWriteRequest_PageID::ArenaDtor(void* object) {
  LogWriteRequest_PageID* _this = reinterpret_cast< LogWriteRequest_PageID* >(object);
  (void)_this;
}
void LogWriteRequest_PageID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogWriteRequest_PageID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogWriteRequest_PageID& LogWriteRequest_PageID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogWriteRequest_PageID_storage_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LogWriteRequest_PageID::Clear() {
// @@protoc_insertion_point(message_clear_start:storage_service.LogWriteRequest.PageID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  page_no_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogWriteRequest_PageID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes table_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 page_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogWriteRequest_PageID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:storage_service.LogWriteRequest.PageID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes table_name = 1;
  if (this->table_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_table_name(), target);
  }

  // sint32 page_no = 2;
  if (this->page_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_page_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storage_service.LogWriteRequest.PageID)
  return target;
}

size_t LogWriteRequest_PageID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storage_service.LogWriteRequest.PageID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes table_name = 1;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_table_name());
  }

  // sint32 page_no = 2;
  if (this->page_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_page_no());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogWriteRequest_PageID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storage_service.LogWriteRequest.PageID)
  GOOGLE_DCHECK_NE(&from, this);
  const LogWriteRequest_PageID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogWriteRequest_PageID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storage_service.LogWriteRequest.PageID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storage_service.LogWriteRequest.PageID)
    MergeFrom(*source);
  }
}

void LogWriteRequest_PageID::MergeFrom(const LogWriteRequest_PageID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storage_service.LogWriteRequest.PageID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table_name().size() > 0) {
    _internal_set_table_name(from._internal_table_name());
  }
  if (from.page_no() != 0) {
    _internal_set_page_no(from._internal_page_no());
  }
}

void LogWriteRequest_PageID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storage_service.LogWriteRequest.PageID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogWriteRequest_PageID::CopyFrom(const LogWriteRequest_PageID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storage_service.LogWriteRequest.PageID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogWriteRequest_PageID::IsInitialized() const {
  return true;
}

void LogWriteRequest_PageID::InternalSwap(LogWriteRequest_PageID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  table_name_.Swap(&other->table_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(page_no_, other->page_no_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogWriteRequest_PageID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogWriteRequest::InitAsDefaultInstance() {
}
class LogWriteRequest::_Internal {
 public:
};

LogWriteRequest::LogWriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  page_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:storage_service.LogWriteRequest)
}
LogWriteRequest::LogWriteRequest(const LogWriteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      page_id_(from.page_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_log().empty()) {
    log_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_log(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:storage_service.LogWriteRequest)
}

void LogWriteRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogWriteRequest_storage_5fservice_2eproto.base);
  log_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LogWriteRequest::~LogWriteRequest() {
  // @@protoc_insertion_point(destructor:storage_service.LogWriteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogWriteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  log_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogWriteRequest::ArenaDtor(void* object) {
  LogWriteRequest* _this = reinterpret_cast< LogWriteRequest* >(object);
  (void)_this;
}
void LogWriteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogWriteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogWriteRequest& LogWriteRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogWriteRequest_storage_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LogWriteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:storage_service.LogWriteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_id_.Clear();
  log_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogWriteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes log = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_log();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .storage_service.LogWriteRequest.PageID page_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_page_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogWriteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:storage_service.LogWriteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes log = 1;
  if (this->log().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_log(), target);
  }

  // repeated .storage_service.LogWriteRequest.PageID page_id = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_page_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_page_id(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storage_service.LogWriteRequest)
  return target;
}

size_t LogWriteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storage_service.LogWriteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .storage_service.LogWriteRequest.PageID page_id = 2;
  total_size += 1UL * this->_internal_page_id_size();
  for (const auto& msg : this->page_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes log = 1;
  if (this->log().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_log());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogWriteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storage_service.LogWriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LogWriteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogWriteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storage_service.LogWriteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storage_service.LogWriteRequest)
    MergeFrom(*source);
  }
}

void LogWriteRequest::MergeFrom(const LogWriteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storage_service.LogWriteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  page_id_.MergeFrom(from.page_id_);
  if (from.log().size() > 0) {
    _internal_set_log(from._internal_log());
  }
}

void LogWriteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storage_service.LogWriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogWriteRequest::CopyFrom(const LogWriteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storage_service.LogWriteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogWriteRequest::IsInitialized() const {
  return true;
}

void LogWriteRequest::InternalSwap(LogWriteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  page_id_.InternalSwap(&other->page_id_);
  log_.Swap(&other->log_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LogWriteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogWriteResponse::InitAsDefaultInstance() {
}
class LogWriteResponse::_Internal {
 public:
};

LogWriteResponse::LogWriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:storage_service.LogWriteResponse)
}
LogWriteResponse::LogWriteResponse(const LogWriteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:storage_service.LogWriteResponse)
}

void LogWriteResponse::SharedCtor() {
}

LogWriteResponse::~LogWriteResponse() {
  // @@protoc_insertion_point(destructor:storage_service.LogWriteResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LogWriteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LogWriteResponse::ArenaDtor(void* object) {
  LogWriteResponse* _this = reinterpret_cast< LogWriteResponse* >(object);
  (void)_this;
}
void LogWriteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogWriteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogWriteResponse& LogWriteResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogWriteResponse_storage_5fservice_2eproto.base);
  return *internal_default_instance();
}


void LogWriteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:storage_service.LogWriteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogWriteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogWriteResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:storage_service.LogWriteResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storage_service.LogWriteResponse)
  return target;
}

size_t LogWriteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storage_service.LogWriteResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogWriteResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storage_service.LogWriteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LogWriteResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogWriteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storage_service.LogWriteResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storage_service.LogWriteResponse)
    MergeFrom(*source);
  }
}

void LogWriteResponse::MergeFrom(const LogWriteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storage_service.LogWriteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LogWriteResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storage_service.LogWriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogWriteResponse::CopyFrom(const LogWriteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storage_service.LogWriteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogWriteResponse::IsInitialized() const {
  return true;
}

void LogWriteResponse::InternalSwap(LogWriteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogWriteResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPageRequest_PageID::InitAsDefaultInstance() {
}
class GetPageRequest_PageID::_Internal {
 public:
};

GetPageRequest_PageID::GetPageRequest_PageID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:storage_service.GetPageRequest.PageID)
}
GetPageRequest_PageID::GetPageRequest_PageID(const GetPageRequest_PageID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_table_name().empty()) {
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_table_name(),
      GetArena());
  }
  page_no_ = from.page_no_;
  // @@protoc_insertion_point(copy_constructor:storage_service.GetPageRequest.PageID)
}

void GetPageRequest_PageID::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPageRequest_PageID_storage_5fservice_2eproto.base);
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_no_ = 0;
}

GetPageRequest_PageID::~GetPageRequest_PageID() {
  // @@protoc_insertion_point(destructor:storage_service.GetPageRequest.PageID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPageRequest_PageID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetPageRequest_PageID::ArenaDtor(void* object) {
  GetPageRequest_PageID* _this = reinterpret_cast< GetPageRequest_PageID* >(object);
  (void)_this;
}
void GetPageRequest_PageID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPageRequest_PageID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPageRequest_PageID& GetPageRequest_PageID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPageRequest_PageID_storage_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetPageRequest_PageID::Clear() {
// @@protoc_insertion_point(message_clear_start:storage_service.GetPageRequest.PageID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  table_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  page_no_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPageRequest_PageID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes table_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 page_no = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_no_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPageRequest_PageID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:storage_service.GetPageRequest.PageID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes table_name = 1;
  if (this->table_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_table_name(), target);
  }

  // sint32 page_no = 2;
  if (this->page_no() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(2, this->_internal_page_no(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storage_service.GetPageRequest.PageID)
  return target;
}

size_t GetPageRequest_PageID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storage_service.GetPageRequest.PageID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes table_name = 1;
  if (this->table_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_table_name());
  }

  // sint32 page_no = 2;
  if (this->page_no() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_page_no());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPageRequest_PageID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storage_service.GetPageRequest.PageID)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPageRequest_PageID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPageRequest_PageID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storage_service.GetPageRequest.PageID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storage_service.GetPageRequest.PageID)
    MergeFrom(*source);
  }
}

void GetPageRequest_PageID::MergeFrom(const GetPageRequest_PageID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storage_service.GetPageRequest.PageID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table_name().size() > 0) {
    _internal_set_table_name(from._internal_table_name());
  }
  if (from.page_no() != 0) {
    _internal_set_page_no(from._internal_page_no());
  }
}

void GetPageRequest_PageID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storage_service.GetPageRequest.PageID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPageRequest_PageID::CopyFrom(const GetPageRequest_PageID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storage_service.GetPageRequest.PageID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPageRequest_PageID::IsInitialized() const {
  return true;
}

void GetPageRequest_PageID::InternalSwap(GetPageRequest_PageID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  table_name_.Swap(&other->table_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(page_no_, other->page_no_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPageRequest_PageID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPageRequest::InitAsDefaultInstance() {
}
class GetPageRequest::_Internal {
 public:
};

GetPageRequest::GetPageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  page_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:storage_service.GetPageRequest)
}
GetPageRequest::GetPageRequest(const GetPageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      page_id_(from.page_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  require_batch_id_ = from.require_batch_id_;
  // @@protoc_insertion_point(copy_constructor:storage_service.GetPageRequest)
}

void GetPageRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPageRequest_storage_5fservice_2eproto.base);
  require_batch_id_ = PROTOBUF_ULONGLONG(0);
}

GetPageRequest::~GetPageRequest() {
  // @@protoc_insertion_point(destructor:storage_service.GetPageRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GetPageRequest::ArenaDtor(void* object) {
  GetPageRequest* _this = reinterpret_cast< GetPageRequest* >(object);
  (void)_this;
}
void GetPageRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPageRequest& GetPageRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPageRequest_storage_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetPageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:storage_service.GetPageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_id_.Clear();
  require_batch_id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPageRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .storage_service.GetPageRequest.PageID page_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_page_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 require_batch_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          require_batch_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPageRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:storage_service.GetPageRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .storage_service.GetPageRequest.PageID page_id = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_page_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_page_id(i), target, stream);
  }

  // uint64 require_batch_id = 2;
  if (this->require_batch_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_require_batch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storage_service.GetPageRequest)
  return target;
}

size_t GetPageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storage_service.GetPageRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .storage_service.GetPageRequest.PageID page_id = 1;
  total_size += 1UL * this->_internal_page_id_size();
  for (const auto& msg : this->page_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 require_batch_id = 2;
  if (this->require_batch_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_require_batch_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPageRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storage_service.GetPageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPageRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPageRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storage_service.GetPageRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storage_service.GetPageRequest)
    MergeFrom(*source);
  }
}

void GetPageRequest::MergeFrom(const GetPageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storage_service.GetPageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  page_id_.MergeFrom(from.page_id_);
  if (from.require_batch_id() != 0) {
    _internal_set_require_batch_id(from._internal_require_batch_id());
  }
}

void GetPageRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storage_service.GetPageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPageRequest::CopyFrom(const GetPageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storage_service.GetPageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPageRequest::IsInitialized() const {
  return true;
}

void GetPageRequest::InternalSwap(GetPageRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  page_id_.InternalSwap(&other->page_id_);
  swap(require_batch_id_, other->require_batch_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPageRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetPageResponse::InitAsDefaultInstance() {
}
class GetPageResponse::_Internal {
 public:
};

GetPageResponse::GetPageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:storage_service.GetPageResponse)
}
GetPageResponse::GetPageResponse(const GetPageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:storage_service.GetPageResponse)
}

void GetPageResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetPageResponse_storage_5fservice_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetPageResponse::~GetPageResponse() {
  // @@protoc_insertion_point(destructor:storage_service.GetPageResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetPageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetPageResponse::ArenaDtor(void* object) {
  GetPageResponse* _this = reinterpret_cast< GetPageResponse* >(object);
  (void)_this;
}
void GetPageResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetPageResponse& GetPageResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetPageResponse_storage_5fservice_2eproto.base);
  return *internal_default_instance();
}


void GetPageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:storage_service.GetPageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPageResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPageResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:storage_service.GetPageResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storage_service.GetPageResponse)
  return target;
}

size_t GetPageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:storage_service.GetPageResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPageResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:storage_service.GetPageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetPageResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetPageResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:storage_service.GetPageResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:storage_service.GetPageResponse)
    MergeFrom(*source);
  }
}

void GetPageResponse::MergeFrom(const GetPageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:storage_service.GetPageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
}

void GetPageResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:storage_service.GetPageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetPageResponse::CopyFrom(const GetPageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:storage_service.GetPageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPageResponse::IsInitialized() const {
  return true;
}

void GetPageResponse::InternalSwap(GetPageResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPageResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

StorageService::~StorageService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* StorageService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_storage_5fservice_2eproto);
  return file_level_service_descriptors_storage_5fservice_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* StorageService::GetDescriptor() {
  return descriptor();
}

void StorageService::LogWrite(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::storage_service::LogWriteRequest*,
                         ::storage_service::LogWriteResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method LogWrite() not implemented.");
  done->Run();
}

void StorageService::GetPage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::storage_service::GetPageRequest*,
                         ::storage_service::GetPageResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetPage() not implemented.");
  done->Run();
}

void StorageService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_storage_5fservice_2eproto[0]);
  switch(method->index()) {
    case 0:
      LogWrite(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::storage_service::LogWriteRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::storage_service::LogWriteResponse*>(
                 response),
             done);
      break;
    case 1:
      GetPage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::storage_service::GetPageRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::storage_service::GetPageResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& StorageService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::storage_service::LogWriteRequest::default_instance();
    case 1:
      return ::storage_service::GetPageRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& StorageService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::storage_service::LogWriteResponse::default_instance();
    case 1:
      return ::storage_service::GetPageResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

StorageService_Stub::StorageService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
StorageService_Stub::StorageService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
StorageService_Stub::~StorageService_Stub() {
  if (owns_channel_) delete channel_;
}

void StorageService_Stub::LogWrite(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::storage_service::LogWriteRequest* request,
                              ::storage_service::LogWriteResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void StorageService_Stub::GetPage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::storage_service::GetPageRequest* request,
                              ::storage_service::GetPageResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace storage_service
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::storage_service::LogWriteRequest_PageID* Arena::CreateMaybeMessage< ::storage_service::LogWriteRequest_PageID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::storage_service::LogWriteRequest_PageID >(arena);
}
template<> PROTOBUF_NOINLINE ::storage_service::LogWriteRequest* Arena::CreateMaybeMessage< ::storage_service::LogWriteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::storage_service::LogWriteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::storage_service::LogWriteResponse* Arena::CreateMaybeMessage< ::storage_service::LogWriteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::storage_service::LogWriteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::storage_service::GetPageRequest_PageID* Arena::CreateMaybeMessage< ::storage_service::GetPageRequest_PageID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::storage_service::GetPageRequest_PageID >(arena);
}
template<> PROTOBUF_NOINLINE ::storage_service::GetPageRequest* Arena::CreateMaybeMessage< ::storage_service::GetPageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::storage_service::GetPageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::storage_service::GetPageResponse* Arena::CreateMaybeMessage< ::storage_service::GetPageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::storage_service::GetPageResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
