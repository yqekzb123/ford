// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_storage_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_storage_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_storage_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_storage_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_storage_5fservice_2eproto;
namespace storage_service {
class GetPageRequest;
class GetPageRequestDefaultTypeInternal;
extern GetPageRequestDefaultTypeInternal _GetPageRequest_default_instance_;
class GetPageRequest_PageID;
class GetPageRequest_PageIDDefaultTypeInternal;
extern GetPageRequest_PageIDDefaultTypeInternal _GetPageRequest_PageID_default_instance_;
class GetPageResponse;
class GetPageResponseDefaultTypeInternal;
extern GetPageResponseDefaultTypeInternal _GetPageResponse_default_instance_;
class LogWriteRequest;
class LogWriteRequestDefaultTypeInternal;
extern LogWriteRequestDefaultTypeInternal _LogWriteRequest_default_instance_;
class LogWriteRequest_PageID;
class LogWriteRequest_PageIDDefaultTypeInternal;
extern LogWriteRequest_PageIDDefaultTypeInternal _LogWriteRequest_PageID_default_instance_;
class LogWriteResponse;
class LogWriteResponseDefaultTypeInternal;
extern LogWriteResponseDefaultTypeInternal _LogWriteResponse_default_instance_;
}  // namespace storage_service
PROTOBUF_NAMESPACE_OPEN
template<> ::storage_service::GetPageRequest* Arena::CreateMaybeMessage<::storage_service::GetPageRequest>(Arena*);
template<> ::storage_service::GetPageRequest_PageID* Arena::CreateMaybeMessage<::storage_service::GetPageRequest_PageID>(Arena*);
template<> ::storage_service::GetPageResponse* Arena::CreateMaybeMessage<::storage_service::GetPageResponse>(Arena*);
template<> ::storage_service::LogWriteRequest* Arena::CreateMaybeMessage<::storage_service::LogWriteRequest>(Arena*);
template<> ::storage_service::LogWriteRequest_PageID* Arena::CreateMaybeMessage<::storage_service::LogWriteRequest_PageID>(Arena*);
template<> ::storage_service::LogWriteResponse* Arena::CreateMaybeMessage<::storage_service::LogWriteResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace storage_service {

// ===================================================================

class LogWriteRequest_PageID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:storage_service.LogWriteRequest.PageID) */ {
 public:
  inline LogWriteRequest_PageID() : LogWriteRequest_PageID(nullptr) {}
  virtual ~LogWriteRequest_PageID();

  LogWriteRequest_PageID(const LogWriteRequest_PageID& from);
  LogWriteRequest_PageID(LogWriteRequest_PageID&& from) noexcept
    : LogWriteRequest_PageID() {
    *this = ::std::move(from);
  }

  inline LogWriteRequest_PageID& operator=(const LogWriteRequest_PageID& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogWriteRequest_PageID& operator=(LogWriteRequest_PageID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogWriteRequest_PageID& default_instance();

  static inline const LogWriteRequest_PageID* internal_default_instance() {
    return reinterpret_cast<const LogWriteRequest_PageID*>(
               &_LogWriteRequest_PageID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogWriteRequest_PageID& a, LogWriteRequest_PageID& b) {
    a.Swap(&b);
  }
  inline void Swap(LogWriteRequest_PageID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogWriteRequest_PageID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogWriteRequest_PageID* New() const final {
    return CreateMaybeMessage<LogWriteRequest_PageID>(nullptr);
  }

  LogWriteRequest_PageID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogWriteRequest_PageID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogWriteRequest_PageID& from);
  void MergeFrom(const LogWriteRequest_PageID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogWriteRequest_PageID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storage_service.LogWriteRequest.PageID";
  }
  protected:
  explicit LogWriteRequest_PageID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_5fservice_2eproto);
    return ::descriptor_table_storage_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableNameFieldNumber = 1,
    kPageNoFieldNumber = 2,
  };
  // bytes table_name = 1;
  void clear_table_name();
  const std::string& table_name() const;
  void set_table_name(const std::string& value);
  void set_table_name(std::string&& value);
  void set_table_name(const char* value);
  void set_table_name(const void* value, size_t size);
  std::string* mutable_table_name();
  std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // sint32 page_no = 2;
  void clear_page_no();
  ::PROTOBUF_NAMESPACE_ID::int32 page_no() const;
  void set_page_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_no() const;
  void _internal_set_page_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:storage_service.LogWriteRequest.PageID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LogWriteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:storage_service.LogWriteRequest) */ {
 public:
  inline LogWriteRequest() : LogWriteRequest(nullptr) {}
  virtual ~LogWriteRequest();

  LogWriteRequest(const LogWriteRequest& from);
  LogWriteRequest(LogWriteRequest&& from) noexcept
    : LogWriteRequest() {
    *this = ::std::move(from);
  }

  inline LogWriteRequest& operator=(const LogWriteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogWriteRequest& operator=(LogWriteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogWriteRequest& default_instance();

  static inline const LogWriteRequest* internal_default_instance() {
    return reinterpret_cast<const LogWriteRequest*>(
               &_LogWriteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LogWriteRequest& a, LogWriteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LogWriteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogWriteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogWriteRequest* New() const final {
    return CreateMaybeMessage<LogWriteRequest>(nullptr);
  }

  LogWriteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogWriteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogWriteRequest& from);
  void MergeFrom(const LogWriteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogWriteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storage_service.LogWriteRequest";
  }
  protected:
  explicit LogWriteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_5fservice_2eproto);
    return ::descriptor_table_storage_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LogWriteRequest_PageID PageID;

  // accessors -------------------------------------------------------

  enum : int {
    kPageIdFieldNumber = 2,
    kLogFieldNumber = 1,
  };
  // repeated .storage_service.LogWriteRequest.PageID page_id = 2;
  int page_id_size() const;
  private:
  int _internal_page_id_size() const;
  public:
  void clear_page_id();
  ::storage_service::LogWriteRequest_PageID* mutable_page_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storage_service::LogWriteRequest_PageID >*
      mutable_page_id();
  private:
  const ::storage_service::LogWriteRequest_PageID& _internal_page_id(int index) const;
  ::storage_service::LogWriteRequest_PageID* _internal_add_page_id();
  public:
  const ::storage_service::LogWriteRequest_PageID& page_id(int index) const;
  ::storage_service::LogWriteRequest_PageID* add_page_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storage_service::LogWriteRequest_PageID >&
      page_id() const;

  // bytes log = 1;
  void clear_log();
  const std::string& log() const;
  void set_log(const std::string& value);
  void set_log(std::string&& value);
  void set_log(const char* value);
  void set_log(const void* value, size_t size);
  std::string* mutable_log();
  std::string* release_log();
  void set_allocated_log(std::string* log);
  private:
  const std::string& _internal_log() const;
  void _internal_set_log(const std::string& value);
  std::string* _internal_mutable_log();
  public:

  // @@protoc_insertion_point(class_scope:storage_service.LogWriteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storage_service::LogWriteRequest_PageID > page_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LogWriteResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:storage_service.LogWriteResponse) */ {
 public:
  inline LogWriteResponse() : LogWriteResponse(nullptr) {}
  virtual ~LogWriteResponse();

  LogWriteResponse(const LogWriteResponse& from);
  LogWriteResponse(LogWriteResponse&& from) noexcept
    : LogWriteResponse() {
    *this = ::std::move(from);
  }

  inline LogWriteResponse& operator=(const LogWriteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogWriteResponse& operator=(LogWriteResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogWriteResponse& default_instance();

  static inline const LogWriteResponse* internal_default_instance() {
    return reinterpret_cast<const LogWriteResponse*>(
               &_LogWriteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LogWriteResponse& a, LogWriteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LogWriteResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogWriteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogWriteResponse* New() const final {
    return CreateMaybeMessage<LogWriteResponse>(nullptr);
  }

  LogWriteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogWriteResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogWriteResponse& from);
  void MergeFrom(const LogWriteResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogWriteResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storage_service.LogWriteResponse";
  }
  protected:
  explicit LogWriteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_5fservice_2eproto);
    return ::descriptor_table_storage_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:storage_service.LogWriteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetPageRequest_PageID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:storage_service.GetPageRequest.PageID) */ {
 public:
  inline GetPageRequest_PageID() : GetPageRequest_PageID(nullptr) {}
  virtual ~GetPageRequest_PageID();

  GetPageRequest_PageID(const GetPageRequest_PageID& from);
  GetPageRequest_PageID(GetPageRequest_PageID&& from) noexcept
    : GetPageRequest_PageID() {
    *this = ::std::move(from);
  }

  inline GetPageRequest_PageID& operator=(const GetPageRequest_PageID& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPageRequest_PageID& operator=(GetPageRequest_PageID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPageRequest_PageID& default_instance();

  static inline const GetPageRequest_PageID* internal_default_instance() {
    return reinterpret_cast<const GetPageRequest_PageID*>(
               &_GetPageRequest_PageID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetPageRequest_PageID& a, GetPageRequest_PageID& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPageRequest_PageID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPageRequest_PageID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPageRequest_PageID* New() const final {
    return CreateMaybeMessage<GetPageRequest_PageID>(nullptr);
  }

  GetPageRequest_PageID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPageRequest_PageID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPageRequest_PageID& from);
  void MergeFrom(const GetPageRequest_PageID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPageRequest_PageID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storage_service.GetPageRequest.PageID";
  }
  protected:
  explicit GetPageRequest_PageID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_5fservice_2eproto);
    return ::descriptor_table_storage_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableNameFieldNumber = 1,
    kPageNoFieldNumber = 2,
  };
  // bytes table_name = 1;
  void clear_table_name();
  const std::string& table_name() const;
  void set_table_name(const std::string& value);
  void set_table_name(std::string&& value);
  void set_table_name(const char* value);
  void set_table_name(const void* value, size_t size);
  std::string* mutable_table_name();
  std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // sint32 page_no = 2;
  void clear_page_no();
  ::PROTOBUF_NAMESPACE_ID::int32 page_no() const;
  void set_page_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_no() const;
  void _internal_set_page_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:storage_service.GetPageRequest.PageID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetPageRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:storage_service.GetPageRequest) */ {
 public:
  inline GetPageRequest() : GetPageRequest(nullptr) {}
  virtual ~GetPageRequest();

  GetPageRequest(const GetPageRequest& from);
  GetPageRequest(GetPageRequest&& from) noexcept
    : GetPageRequest() {
    *this = ::std::move(from);
  }

  inline GetPageRequest& operator=(const GetPageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPageRequest& operator=(GetPageRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPageRequest& default_instance();

  static inline const GetPageRequest* internal_default_instance() {
    return reinterpret_cast<const GetPageRequest*>(
               &_GetPageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetPageRequest& a, GetPageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPageRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPageRequest* New() const final {
    return CreateMaybeMessage<GetPageRequest>(nullptr);
  }

  GetPageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPageRequest& from);
  void MergeFrom(const GetPageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storage_service.GetPageRequest";
  }
  protected:
  explicit GetPageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_5fservice_2eproto);
    return ::descriptor_table_storage_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GetPageRequest_PageID PageID;

  // accessors -------------------------------------------------------

  enum : int {
    kPageIdFieldNumber = 1,
    kRequireBatchIdFieldNumber = 2,
  };
  // repeated .storage_service.GetPageRequest.PageID page_id = 1;
  int page_id_size() const;
  private:
  int _internal_page_id_size() const;
  public:
  void clear_page_id();
  ::storage_service::GetPageRequest_PageID* mutable_page_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storage_service::GetPageRequest_PageID >*
      mutable_page_id();
  private:
  const ::storage_service::GetPageRequest_PageID& _internal_page_id(int index) const;
  ::storage_service::GetPageRequest_PageID* _internal_add_page_id();
  public:
  const ::storage_service::GetPageRequest_PageID& page_id(int index) const;
  ::storage_service::GetPageRequest_PageID* add_page_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storage_service::GetPageRequest_PageID >&
      page_id() const;

  // uint64 require_batch_id = 2;
  void clear_require_batch_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 require_batch_id() const;
  void set_require_batch_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_require_batch_id() const;
  void _internal_set_require_batch_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:storage_service.GetPageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storage_service::GetPageRequest_PageID > page_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 require_batch_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetPageResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:storage_service.GetPageResponse) */ {
 public:
  inline GetPageResponse() : GetPageResponse(nullptr) {}
  virtual ~GetPageResponse();

  GetPageResponse(const GetPageResponse& from);
  GetPageResponse(GetPageResponse&& from) noexcept
    : GetPageResponse() {
    *this = ::std::move(from);
  }

  inline GetPageResponse& operator=(const GetPageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPageResponse& operator=(GetPageResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPageResponse& default_instance();

  static inline const GetPageResponse* internal_default_instance() {
    return reinterpret_cast<const GetPageResponse*>(
               &_GetPageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetPageResponse& a, GetPageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPageResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPageResponse* New() const final {
    return CreateMaybeMessage<GetPageResponse>(nullptr);
  }

  GetPageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPageResponse& from);
  void MergeFrom(const GetPageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "storage_service.GetPageResponse";
  }
  protected:
  explicit GetPageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_storage_5fservice_2eproto);
    return ::descriptor_table_storage_5fservice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // bytes data = 1;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:storage_service.GetPageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_storage_5fservice_2eproto;
};
// ===================================================================

class StorageService_Stub;

class StorageService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline StorageService() {};
 public:
  virtual ~StorageService();

  typedef StorageService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void LogWrite(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::storage_service::LogWriteRequest* request,
                       ::storage_service::LogWriteResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetPage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::storage_service::GetPageRequest* request,
                       ::storage_service::GetPageResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(StorageService);
};

class StorageService_Stub : public StorageService {
 public:
  StorageService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  StorageService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~StorageService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements StorageService ------------------------------------------

  void LogWrite(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::storage_service::LogWriteRequest* request,
                       ::storage_service::LogWriteResponse* response,
                       ::google::protobuf::Closure* done);
  void GetPage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::storage_service::GetPageRequest* request,
                       ::storage_service::GetPageResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(StorageService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogWriteRequest_PageID

// bytes table_name = 1;
inline void LogWriteRequest_PageID::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& LogWriteRequest_PageID::table_name() const {
  // @@protoc_insertion_point(field_get:storage_service.LogWriteRequest.PageID.table_name)
  return _internal_table_name();
}
inline void LogWriteRequest_PageID::set_table_name(const std::string& value) {
  _internal_set_table_name(value);
  // @@protoc_insertion_point(field_set:storage_service.LogWriteRequest.PageID.table_name)
}
inline std::string* LogWriteRequest_PageID::mutable_table_name() {
  // @@protoc_insertion_point(field_mutable:storage_service.LogWriteRequest.PageID.table_name)
  return _internal_mutable_table_name();
}
inline const std::string& LogWriteRequest_PageID::_internal_table_name() const {
  return table_name_.Get();
}
inline void LogWriteRequest_PageID::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LogWriteRequest_PageID::set_table_name(std::string&& value) {
  
  table_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:storage_service.LogWriteRequest.PageID.table_name)
}
inline void LogWriteRequest_PageID::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:storage_service.LogWriteRequest.PageID.table_name)
}
inline void LogWriteRequest_PageID::set_table_name(const void* value,
    size_t size) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:storage_service.LogWriteRequest.PageID.table_name)
}
inline std::string* LogWriteRequest_PageID::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LogWriteRequest_PageID::release_table_name() {
  // @@protoc_insertion_point(field_release:storage_service.LogWriteRequest.PageID.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogWriteRequest_PageID::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:storage_service.LogWriteRequest.PageID.table_name)
}

// sint32 page_no = 2;
inline void LogWriteRequest_PageID::clear_page_no() {
  page_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogWriteRequest_PageID::_internal_page_no() const {
  return page_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LogWriteRequest_PageID::page_no() const {
  // @@protoc_insertion_point(field_get:storage_service.LogWriteRequest.PageID.page_no)
  return _internal_page_no();
}
inline void LogWriteRequest_PageID::_internal_set_page_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_no_ = value;
}
inline void LogWriteRequest_PageID::set_page_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_no(value);
  // @@protoc_insertion_point(field_set:storage_service.LogWriteRequest.PageID.page_no)
}

// -------------------------------------------------------------------

// LogWriteRequest

// bytes log = 1;
inline void LogWriteRequest::clear_log() {
  log_.ClearToEmpty();
}
inline const std::string& LogWriteRequest::log() const {
  // @@protoc_insertion_point(field_get:storage_service.LogWriteRequest.log)
  return _internal_log();
}
inline void LogWriteRequest::set_log(const std::string& value) {
  _internal_set_log(value);
  // @@protoc_insertion_point(field_set:storage_service.LogWriteRequest.log)
}
inline std::string* LogWriteRequest::mutable_log() {
  // @@protoc_insertion_point(field_mutable:storage_service.LogWriteRequest.log)
  return _internal_mutable_log();
}
inline const std::string& LogWriteRequest::_internal_log() const {
  return log_.Get();
}
inline void LogWriteRequest::_internal_set_log(const std::string& value) {
  
  log_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LogWriteRequest::set_log(std::string&& value) {
  
  log_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:storage_service.LogWriteRequest.log)
}
inline void LogWriteRequest::set_log(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  log_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:storage_service.LogWriteRequest.log)
}
inline void LogWriteRequest::set_log(const void* value,
    size_t size) {
  
  log_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:storage_service.LogWriteRequest.log)
}
inline std::string* LogWriteRequest::_internal_mutable_log() {
  
  return log_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LogWriteRequest::release_log() {
  // @@protoc_insertion_point(field_release:storage_service.LogWriteRequest.log)
  return log_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LogWriteRequest::set_allocated_log(std::string* log) {
  if (log != nullptr) {
    
  } else {
    
  }
  log_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:storage_service.LogWriteRequest.log)
}

// repeated .storage_service.LogWriteRequest.PageID page_id = 2;
inline int LogWriteRequest::_internal_page_id_size() const {
  return page_id_.size();
}
inline int LogWriteRequest::page_id_size() const {
  return _internal_page_id_size();
}
inline void LogWriteRequest::clear_page_id() {
  page_id_.Clear();
}
inline ::storage_service::LogWriteRequest_PageID* LogWriteRequest::mutable_page_id(int index) {
  // @@protoc_insertion_point(field_mutable:storage_service.LogWriteRequest.page_id)
  return page_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storage_service::LogWriteRequest_PageID >*
LogWriteRequest::mutable_page_id() {
  // @@protoc_insertion_point(field_mutable_list:storage_service.LogWriteRequest.page_id)
  return &page_id_;
}
inline const ::storage_service::LogWriteRequest_PageID& LogWriteRequest::_internal_page_id(int index) const {
  return page_id_.Get(index);
}
inline const ::storage_service::LogWriteRequest_PageID& LogWriteRequest::page_id(int index) const {
  // @@protoc_insertion_point(field_get:storage_service.LogWriteRequest.page_id)
  return _internal_page_id(index);
}
inline ::storage_service::LogWriteRequest_PageID* LogWriteRequest::_internal_add_page_id() {
  return page_id_.Add();
}
inline ::storage_service::LogWriteRequest_PageID* LogWriteRequest::add_page_id() {
  // @@protoc_insertion_point(field_add:storage_service.LogWriteRequest.page_id)
  return _internal_add_page_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storage_service::LogWriteRequest_PageID >&
LogWriteRequest::page_id() const {
  // @@protoc_insertion_point(field_list:storage_service.LogWriteRequest.page_id)
  return page_id_;
}

// -------------------------------------------------------------------

// LogWriteResponse

// -------------------------------------------------------------------

// GetPageRequest_PageID

// bytes table_name = 1;
inline void GetPageRequest_PageID::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& GetPageRequest_PageID::table_name() const {
  // @@protoc_insertion_point(field_get:storage_service.GetPageRequest.PageID.table_name)
  return _internal_table_name();
}
inline void GetPageRequest_PageID::set_table_name(const std::string& value) {
  _internal_set_table_name(value);
  // @@protoc_insertion_point(field_set:storage_service.GetPageRequest.PageID.table_name)
}
inline std::string* GetPageRequest_PageID::mutable_table_name() {
  // @@protoc_insertion_point(field_mutable:storage_service.GetPageRequest.PageID.table_name)
  return _internal_mutable_table_name();
}
inline const std::string& GetPageRequest_PageID::_internal_table_name() const {
  return table_name_.Get();
}
inline void GetPageRequest_PageID::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetPageRequest_PageID::set_table_name(std::string&& value) {
  
  table_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:storage_service.GetPageRequest.PageID.table_name)
}
inline void GetPageRequest_PageID::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:storage_service.GetPageRequest.PageID.table_name)
}
inline void GetPageRequest_PageID::set_table_name(const void* value,
    size_t size) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:storage_service.GetPageRequest.PageID.table_name)
}
inline std::string* GetPageRequest_PageID::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetPageRequest_PageID::release_table_name() {
  // @@protoc_insertion_point(field_release:storage_service.GetPageRequest.PageID.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetPageRequest_PageID::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:storage_service.GetPageRequest.PageID.table_name)
}

// sint32 page_no = 2;
inline void GetPageRequest_PageID::clear_page_no() {
  page_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPageRequest_PageID::_internal_page_no() const {
  return page_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPageRequest_PageID::page_no() const {
  // @@protoc_insertion_point(field_get:storage_service.GetPageRequest.PageID.page_no)
  return _internal_page_no();
}
inline void GetPageRequest_PageID::_internal_set_page_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_no_ = value;
}
inline void GetPageRequest_PageID::set_page_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_no(value);
  // @@protoc_insertion_point(field_set:storage_service.GetPageRequest.PageID.page_no)
}

// -------------------------------------------------------------------

// GetPageRequest

// repeated .storage_service.GetPageRequest.PageID page_id = 1;
inline int GetPageRequest::_internal_page_id_size() const {
  return page_id_.size();
}
inline int GetPageRequest::page_id_size() const {
  return _internal_page_id_size();
}
inline void GetPageRequest::clear_page_id() {
  page_id_.Clear();
}
inline ::storage_service::GetPageRequest_PageID* GetPageRequest::mutable_page_id(int index) {
  // @@protoc_insertion_point(field_mutable:storage_service.GetPageRequest.page_id)
  return page_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storage_service::GetPageRequest_PageID >*
GetPageRequest::mutable_page_id() {
  // @@protoc_insertion_point(field_mutable_list:storage_service.GetPageRequest.page_id)
  return &page_id_;
}
inline const ::storage_service::GetPageRequest_PageID& GetPageRequest::_internal_page_id(int index) const {
  return page_id_.Get(index);
}
inline const ::storage_service::GetPageRequest_PageID& GetPageRequest::page_id(int index) const {
  // @@protoc_insertion_point(field_get:storage_service.GetPageRequest.page_id)
  return _internal_page_id(index);
}
inline ::storage_service::GetPageRequest_PageID* GetPageRequest::_internal_add_page_id() {
  return page_id_.Add();
}
inline ::storage_service::GetPageRequest_PageID* GetPageRequest::add_page_id() {
  // @@protoc_insertion_point(field_add:storage_service.GetPageRequest.page_id)
  return _internal_add_page_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::storage_service::GetPageRequest_PageID >&
GetPageRequest::page_id() const {
  // @@protoc_insertion_point(field_list:storage_service.GetPageRequest.page_id)
  return page_id_;
}

// uint64 require_batch_id = 2;
inline void GetPageRequest::clear_require_batch_id() {
  require_batch_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetPageRequest::_internal_require_batch_id() const {
  return require_batch_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 GetPageRequest::require_batch_id() const {
  // @@protoc_insertion_point(field_get:storage_service.GetPageRequest.require_batch_id)
  return _internal_require_batch_id();
}
inline void GetPageRequest::_internal_set_require_batch_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  require_batch_id_ = value;
}
inline void GetPageRequest::set_require_batch_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_require_batch_id(value);
  // @@protoc_insertion_point(field_set:storage_service.GetPageRequest.require_batch_id)
}

// -------------------------------------------------------------------

// GetPageResponse

// bytes data = 1;
inline void GetPageResponse::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& GetPageResponse::data() const {
  // @@protoc_insertion_point(field_get:storage_service.GetPageResponse.data)
  return _internal_data();
}
inline void GetPageResponse::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:storage_service.GetPageResponse.data)
}
inline std::string* GetPageResponse::mutable_data() {
  // @@protoc_insertion_point(field_mutable:storage_service.GetPageResponse.data)
  return _internal_mutable_data();
}
inline const std::string& GetPageResponse::_internal_data() const {
  return data_.Get();
}
inline void GetPageResponse::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetPageResponse::set_data(std::string&& value) {
  
  data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:storage_service.GetPageResponse.data)
}
inline void GetPageResponse::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:storage_service.GetPageResponse.data)
}
inline void GetPageResponse::set_data(const void* value,
    size_t size) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:storage_service.GetPageResponse.data)
}
inline std::string* GetPageResponse::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetPageResponse::release_data() {
  // @@protoc_insertion_point(field_release:storage_service.GetPageResponse.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetPageResponse::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:storage_service.GetPageResponse.data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace storage_service

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_storage_5fservice_2eproto
