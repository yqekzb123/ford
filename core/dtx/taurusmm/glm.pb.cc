// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: glm.proto

#include "glm.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_glm_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LockID_glm_2eproto;
namespace glm_service {
class LockIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LockID> _instance;
} _LockID_default_instance_;
class LockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LockRequest> _instance;
} _LockRequest_default_instance_;
class LockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LockResponse> _instance;
} _LockResponse_default_instance_;
class UnLockRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnLockRequest> _instance;
} _UnLockRequest_default_instance_;
class UnLockResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnLockResponse> _instance;
} _UnLockResponse_default_instance_;
}  // namespace glm_service
static void InitDefaultsscc_info_LockID_glm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::glm_service::_LockID_default_instance_;
    new (ptr) ::glm_service::LockID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::glm_service::LockID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LockID_glm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LockID_glm_2eproto}, {}};

static void InitDefaultsscc_info_LockRequest_glm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::glm_service::_LockRequest_default_instance_;
    new (ptr) ::glm_service::LockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::glm_service::LockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LockRequest_glm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LockRequest_glm_2eproto}, {
      &scc_info_LockID_glm_2eproto.base,}};

static void InitDefaultsscc_info_LockResponse_glm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::glm_service::_LockResponse_default_instance_;
    new (ptr) ::glm_service::LockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::glm_service::LockResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LockResponse_glm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LockResponse_glm_2eproto}, {}};

static void InitDefaultsscc_info_UnLockRequest_glm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::glm_service::_UnLockRequest_default_instance_;
    new (ptr) ::glm_service::UnLockRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::glm_service::UnLockRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UnLockRequest_glm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UnLockRequest_glm_2eproto}, {
      &scc_info_LockID_glm_2eproto.base,}};

static void InitDefaultsscc_info_UnLockResponse_glm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::glm_service::_UnLockResponse_default_instance_;
    new (ptr) ::glm_service::UnLockResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::glm_service::UnLockResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnLockResponse_glm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnLockResponse_glm_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_glm_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_glm_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_glm_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_glm_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::glm_service::LockID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::glm_service::LockID, table_id_),
  PROTOBUF_FIELD_OFFSET(::glm_service::LockID, page_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::glm_service::LockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::glm_service::LockRequest, shared_lock_id_),
  PROTOBUF_FIELD_OFFSET(::glm_service::LockRequest, exclusive_lock_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::glm_service::LockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::glm_service::LockResponse, shared_fail_request_loc_),
  PROTOBUF_FIELD_OFFSET(::glm_service::LockResponse, exclusive_fail_request_loc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::glm_service::UnLockRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::glm_service::UnLockRequest, shared_unlock_id_),
  PROTOBUF_FIELD_OFFSET(::glm_service::UnLockRequest, exclusive_unlock_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::glm_service::UnLockResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::glm_service::LockID)},
  { 7, -1, sizeof(::glm_service::LockRequest)},
  { 14, -1, sizeof(::glm_service::LockResponse)},
  { 21, -1, sizeof(::glm_service::UnLockRequest)},
  { 28, -1, sizeof(::glm_service::UnLockResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::glm_service::_LockID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::glm_service::_LockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::glm_service::_LockResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::glm_service::_UnLockRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::glm_service::_UnLockResponse_default_instance_),
};

const char descriptor_table_protodef_glm_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tglm.proto\022\013glm_service\"+\n\006LockID\022\020\n\010ta"
  "ble_id\030\001 \001(\004\022\017\n\007page_id\030\002 \001(\004\"j\n\013LockReq"
  "uest\022+\n\016shared_lock_id\030\001 \003(\0132\023.glm_servi"
  "ce.LockID\022.\n\021exclusive_lock_id\030\002 \003(\0132\023.g"
  "lm_service.LockID\"S\n\014LockResponse\022\037\n\027sha"
  "red_fail_request_loc\030\001 \001(\003\022\"\n\032exclusive_"
  "fail_request_loc\030\002 \001(\003\"p\n\rUnLockRequest\022"
  "-\n\020shared_unlock_id\030\001 \003(\0132\023.glm_service."
  "LockID\0220\n\023exclusive_unlock_id\030\002 \003(\0132\023.gl"
  "m_service.LockID\"\020\n\016UnLockResponse2\224\001\n\nG"
  "LMService\022\?\n\010LockPage\022\030.glm_service.Lock"
  "Request\032\031.glm_service.LockResponse\022E\n\nUn"
  "LockPage\022\032.glm_service.UnLockRequest\032\033.g"
  "lm_service.UnLockResponseB\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_glm_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_glm_2eproto_sccs[5] = {
  &scc_info_LockID_glm_2eproto.base,
  &scc_info_LockRequest_glm_2eproto.base,
  &scc_info_LockResponse_glm_2eproto.base,
  &scc_info_UnLockRequest_glm_2eproto.base,
  &scc_info_UnLockResponse_glm_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_glm_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_glm_2eproto = {
  false, false, descriptor_table_protodef_glm_2eproto, "glm.proto", 558,
  &descriptor_table_glm_2eproto_once, descriptor_table_glm_2eproto_sccs, descriptor_table_glm_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_glm_2eproto::offsets,
  file_level_metadata_glm_2eproto, 5, file_level_enum_descriptors_glm_2eproto, file_level_service_descriptors_glm_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_glm_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_glm_2eproto)), true);
namespace glm_service {

// ===================================================================

void LockID::InitAsDefaultInstance() {
}
class LockID::_Internal {
 public:
};

LockID::LockID(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:glm_service.LockID)
}
LockID::LockID(const LockID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&table_id_, &from.table_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_id_) -
    reinterpret_cast<char*>(&table_id_)) + sizeof(page_id_));
  // @@protoc_insertion_point(copy_constructor:glm_service.LockID)
}

void LockID::SharedCtor() {
  ::memset(&table_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_id_) -
      reinterpret_cast<char*>(&table_id_)) + sizeof(page_id_));
}

LockID::~LockID() {
  // @@protoc_insertion_point(destructor:glm_service.LockID)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LockID::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LockID::ArenaDtor(void* object) {
  LockID* _this = reinterpret_cast< LockID* >(object);
  (void)_this;
}
void LockID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LockID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LockID& LockID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LockID_glm_2eproto.base);
  return *internal_default_instance();
}


void LockID::Clear() {
// @@protoc_insertion_point(message_clear_start:glm_service.LockID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&table_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_id_) -
      reinterpret_cast<char*>(&table_id_)) + sizeof(page_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LockID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 table_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          table_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 page_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LockID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:glm_service.LockID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 table_id = 1;
  if (this->table_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_table_id(), target);
  }

  // uint64 page_id = 2;
  if (this->page_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_page_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:glm_service.LockID)
  return target;
}

size_t LockID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:glm_service.LockID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 table_id = 1;
  if (this->table_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_table_id());
  }

  // uint64 page_id = 2;
  if (this->page_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_page_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LockID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:glm_service.LockID)
  GOOGLE_DCHECK_NE(&from, this);
  const LockID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LockID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:glm_service.LockID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:glm_service.LockID)
    MergeFrom(*source);
  }
}

void LockID::MergeFrom(const LockID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:glm_service.LockID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.table_id() != 0) {
    _internal_set_table_id(from._internal_table_id());
  }
  if (from.page_id() != 0) {
    _internal_set_page_id(from._internal_page_id());
  }
}

void LockID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:glm_service.LockID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockID::CopyFrom(const LockID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:glm_service.LockID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockID::IsInitialized() const {
  return true;
}

void LockID::InternalSwap(LockID* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LockID, page_id_)
      + sizeof(LockID::page_id_)
      - PROTOBUF_FIELD_OFFSET(LockID, table_id_)>(
          reinterpret_cast<char*>(&table_id_),
          reinterpret_cast<char*>(&other->table_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LockID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LockRequest::InitAsDefaultInstance() {
}
class LockRequest::_Internal {
 public:
};

LockRequest::LockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  shared_lock_id_(arena),
  exclusive_lock_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:glm_service.LockRequest)
}
LockRequest::LockRequest(const LockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shared_lock_id_(from.shared_lock_id_),
      exclusive_lock_id_(from.exclusive_lock_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:glm_service.LockRequest)
}

void LockRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LockRequest_glm_2eproto.base);
}

LockRequest::~LockRequest() {
  // @@protoc_insertion_point(destructor:glm_service.LockRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LockRequest::ArenaDtor(void* object) {
  LockRequest* _this = reinterpret_cast< LockRequest* >(object);
  (void)_this;
}
void LockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LockRequest& LockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LockRequest_glm_2eproto.base);
  return *internal_default_instance();
}


void LockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:glm_service.LockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shared_lock_id_.Clear();
  exclusive_lock_id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .glm_service.LockID shared_lock_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shared_lock_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .glm_service.LockID exclusive_lock_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exclusive_lock_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:glm_service.LockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .glm_service.LockID shared_lock_id = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shared_lock_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_shared_lock_id(i), target, stream);
  }

  // repeated .glm_service.LockID exclusive_lock_id = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_exclusive_lock_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_exclusive_lock_id(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:glm_service.LockRequest)
  return target;
}

size_t LockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:glm_service.LockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .glm_service.LockID shared_lock_id = 1;
  total_size += 1UL * this->_internal_shared_lock_id_size();
  for (const auto& msg : this->shared_lock_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .glm_service.LockID exclusive_lock_id = 2;
  total_size += 1UL * this->_internal_exclusive_lock_id_size();
  for (const auto& msg : this->exclusive_lock_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:glm_service.LockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:glm_service.LockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:glm_service.LockRequest)
    MergeFrom(*source);
  }
}

void LockRequest::MergeFrom(const LockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:glm_service.LockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shared_lock_id_.MergeFrom(from.shared_lock_id_);
  exclusive_lock_id_.MergeFrom(from.exclusive_lock_id_);
}

void LockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:glm_service.LockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockRequest::CopyFrom(const LockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:glm_service.LockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockRequest::IsInitialized() const {
  return true;
}

void LockRequest::InternalSwap(LockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  shared_lock_id_.InternalSwap(&other->shared_lock_id_);
  exclusive_lock_id_.InternalSwap(&other->exclusive_lock_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LockResponse::InitAsDefaultInstance() {
}
class LockResponse::_Internal {
 public:
};

LockResponse::LockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:glm_service.LockResponse)
}
LockResponse::LockResponse(const LockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&shared_fail_request_loc_, &from.shared_fail_request_loc_,
    static_cast<size_t>(reinterpret_cast<char*>(&exclusive_fail_request_loc_) -
    reinterpret_cast<char*>(&shared_fail_request_loc_)) + sizeof(exclusive_fail_request_loc_));
  // @@protoc_insertion_point(copy_constructor:glm_service.LockResponse)
}

void LockResponse::SharedCtor() {
  ::memset(&shared_fail_request_loc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exclusive_fail_request_loc_) -
      reinterpret_cast<char*>(&shared_fail_request_loc_)) + sizeof(exclusive_fail_request_loc_));
}

LockResponse::~LockResponse() {
  // @@protoc_insertion_point(destructor:glm_service.LockResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LockResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LockResponse::ArenaDtor(void* object) {
  LockResponse* _this = reinterpret_cast< LockResponse* >(object);
  (void)_this;
}
void LockResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LockResponse& LockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LockResponse_glm_2eproto.base);
  return *internal_default_instance();
}


void LockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:glm_service.LockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&shared_fail_request_loc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exclusive_fail_request_loc_) -
      reinterpret_cast<char*>(&shared_fail_request_loc_)) + sizeof(exclusive_fail_request_loc_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 shared_fail_request_loc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          shared_fail_request_loc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 exclusive_fail_request_loc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          exclusive_fail_request_loc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LockResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:glm_service.LockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 shared_fail_request_loc = 1;
  if (this->shared_fail_request_loc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_shared_fail_request_loc(), target);
  }

  // int64 exclusive_fail_request_loc = 2;
  if (this->exclusive_fail_request_loc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_exclusive_fail_request_loc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:glm_service.LockResponse)
  return target;
}

size_t LockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:glm_service.LockResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 shared_fail_request_loc = 1;
  if (this->shared_fail_request_loc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_shared_fail_request_loc());
  }

  // int64 exclusive_fail_request_loc = 2;
  if (this->exclusive_fail_request_loc() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_exclusive_fail_request_loc());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:glm_service.LockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:glm_service.LockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:glm_service.LockResponse)
    MergeFrom(*source);
  }
}

void LockResponse::MergeFrom(const LockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:glm_service.LockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.shared_fail_request_loc() != 0) {
    _internal_set_shared_fail_request_loc(from._internal_shared_fail_request_loc());
  }
  if (from.exclusive_fail_request_loc() != 0) {
    _internal_set_exclusive_fail_request_loc(from._internal_exclusive_fail_request_loc());
  }
}

void LockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:glm_service.LockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockResponse::CopyFrom(const LockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:glm_service.LockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockResponse::IsInitialized() const {
  return true;
}

void LockResponse::InternalSwap(LockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LockResponse, exclusive_fail_request_loc_)
      + sizeof(LockResponse::exclusive_fail_request_loc_)
      - PROTOBUF_FIELD_OFFSET(LockResponse, shared_fail_request_loc_)>(
          reinterpret_cast<char*>(&shared_fail_request_loc_),
          reinterpret_cast<char*>(&other->shared_fail_request_loc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnLockRequest::InitAsDefaultInstance() {
}
class UnLockRequest::_Internal {
 public:
};

UnLockRequest::UnLockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  shared_unlock_id_(arena),
  exclusive_unlock_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:glm_service.UnLockRequest)
}
UnLockRequest::UnLockRequest(const UnLockRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      shared_unlock_id_(from.shared_unlock_id_),
      exclusive_unlock_id_(from.exclusive_unlock_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:glm_service.UnLockRequest)
}

void UnLockRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnLockRequest_glm_2eproto.base);
}

UnLockRequest::~UnLockRequest() {
  // @@protoc_insertion_point(destructor:glm_service.UnLockRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnLockRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnLockRequest::ArenaDtor(void* object) {
  UnLockRequest* _this = reinterpret_cast< UnLockRequest* >(object);
  (void)_this;
}
void UnLockRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnLockRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnLockRequest& UnLockRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnLockRequest_glm_2eproto.base);
  return *internal_default_instance();
}


void UnLockRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:glm_service.UnLockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shared_unlock_id_.Clear();
  exclusive_unlock_id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnLockRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .glm_service.LockID shared_unlock_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shared_unlock_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .glm_service.LockID exclusive_unlock_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exclusive_unlock_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnLockRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:glm_service.UnLockRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .glm_service.LockID shared_unlock_id = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shared_unlock_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_shared_unlock_id(i), target, stream);
  }

  // repeated .glm_service.LockID exclusive_unlock_id = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_exclusive_unlock_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_exclusive_unlock_id(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:glm_service.UnLockRequest)
  return target;
}

size_t UnLockRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:glm_service.UnLockRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .glm_service.LockID shared_unlock_id = 1;
  total_size += 1UL * this->_internal_shared_unlock_id_size();
  for (const auto& msg : this->shared_unlock_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .glm_service.LockID exclusive_unlock_id = 2;
  total_size += 1UL * this->_internal_exclusive_unlock_id_size();
  for (const auto& msg : this->exclusive_unlock_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnLockRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:glm_service.UnLockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UnLockRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnLockRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:glm_service.UnLockRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:glm_service.UnLockRequest)
    MergeFrom(*source);
  }
}

void UnLockRequest::MergeFrom(const UnLockRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:glm_service.UnLockRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shared_unlock_id_.MergeFrom(from.shared_unlock_id_);
  exclusive_unlock_id_.MergeFrom(from.exclusive_unlock_id_);
}

void UnLockRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:glm_service.UnLockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnLockRequest::CopyFrom(const UnLockRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:glm_service.UnLockRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnLockRequest::IsInitialized() const {
  return true;
}

void UnLockRequest::InternalSwap(UnLockRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  shared_unlock_id_.InternalSwap(&other->shared_unlock_id_);
  exclusive_unlock_id_.InternalSwap(&other->exclusive_unlock_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnLockRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnLockResponse::InitAsDefaultInstance() {
}
class UnLockResponse::_Internal {
 public:
};

UnLockResponse::UnLockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:glm_service.UnLockResponse)
}
UnLockResponse::UnLockResponse(const UnLockResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:glm_service.UnLockResponse)
}

void UnLockResponse::SharedCtor() {
}

UnLockResponse::~UnLockResponse() {
  // @@protoc_insertion_point(destructor:glm_service.UnLockResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UnLockResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void UnLockResponse::ArenaDtor(void* object) {
  UnLockResponse* _this = reinterpret_cast< UnLockResponse* >(object);
  (void)_this;
}
void UnLockResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnLockResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnLockResponse& UnLockResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnLockResponse_glm_2eproto.base);
  return *internal_default_instance();
}


void UnLockResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:glm_service.UnLockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnLockResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnLockResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:glm_service.UnLockResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:glm_service.UnLockResponse)
  return target;
}

size_t UnLockResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:glm_service.UnLockResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnLockResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:glm_service.UnLockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const UnLockResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnLockResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:glm_service.UnLockResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:glm_service.UnLockResponse)
    MergeFrom(*source);
  }
}

void UnLockResponse::MergeFrom(const UnLockResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:glm_service.UnLockResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void UnLockResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:glm_service.UnLockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnLockResponse::CopyFrom(const UnLockResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:glm_service.UnLockResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnLockResponse::IsInitialized() const {
  return true;
}

void UnLockResponse::InternalSwap(UnLockResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnLockResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

GLMService::~GLMService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GLMService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_glm_2eproto);
  return file_level_service_descriptors_glm_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GLMService::GetDescriptor() {
  return descriptor();
}

void GLMService::LockPage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::glm_service::LockRequest*,
                         ::glm_service::LockResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method LockPage() not implemented.");
  done->Run();
}

void GLMService::UnLockPage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::glm_service::UnLockRequest*,
                         ::glm_service::UnLockResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method UnLockPage() not implemented.");
  done->Run();
}

void GLMService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_glm_2eproto[0]);
  switch(method->index()) {
    case 0:
      LockPage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::glm_service::LockRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::glm_service::LockResponse*>(
                 response),
             done);
      break;
    case 1:
      UnLockPage(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::glm_service::UnLockRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::glm_service::UnLockResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GLMService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::glm_service::LockRequest::default_instance();
    case 1:
      return ::glm_service::UnLockRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& GLMService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::glm_service::LockResponse::default_instance();
    case 1:
      return ::glm_service::UnLockResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

GLMService_Stub::GLMService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
GLMService_Stub::GLMService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
GLMService_Stub::~GLMService_Stub() {
  if (owns_channel_) delete channel_;
}

void GLMService_Stub::LockPage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::glm_service::LockRequest* request,
                              ::glm_service::LockResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void GLMService_Stub::UnLockPage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::glm_service::UnLockRequest* request,
                              ::glm_service::UnLockResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace glm_service
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::glm_service::LockID* Arena::CreateMaybeMessage< ::glm_service::LockID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::glm_service::LockID >(arena);
}
template<> PROTOBUF_NOINLINE ::glm_service::LockRequest* Arena::CreateMaybeMessage< ::glm_service::LockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::glm_service::LockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::glm_service::LockResponse* Arena::CreateMaybeMessage< ::glm_service::LockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::glm_service::LockResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::glm_service::UnLockRequest* Arena::CreateMaybeMessage< ::glm_service::UnLockRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::glm_service::UnLockRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::glm_service::UnLockResponse* Arena::CreateMaybeMessage< ::glm_service::UnLockResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::glm_service::UnLockResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
