// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: master_log.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_master_5flog_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_master_5flog_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_master_5flog_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_master_5flog_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_master_5flog_2eproto;
namespace mslog_service {
class MS2MSLogRequest;
class MS2MSLogRequestDefaultTypeInternal;
extern MS2MSLogRequestDefaultTypeInternal _MS2MSLogRequest_default_instance_;
class MS2MSLogResponse;
class MS2MSLogResponseDefaultTypeInternal;
extern MS2MSLogResponseDefaultTypeInternal _MS2MSLogResponse_default_instance_;
}  // namespace mslog_service
PROTOBUF_NAMESPACE_OPEN
template<> ::mslog_service::MS2MSLogRequest* Arena::CreateMaybeMessage<::mslog_service::MS2MSLogRequest>(Arena*);
template<> ::mslog_service::MS2MSLogResponse* Arena::CreateMaybeMessage<::mslog_service::MS2MSLogResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mslog_service {

// ===================================================================

class MS2MSLogRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mslog_service.MS2MSLogRequest) */ {
 public:
  inline MS2MSLogRequest() : MS2MSLogRequest(nullptr) {};
  virtual ~MS2MSLogRequest();

  MS2MSLogRequest(const MS2MSLogRequest& from);
  MS2MSLogRequest(MS2MSLogRequest&& from) noexcept
    : MS2MSLogRequest() {
    *this = ::std::move(from);
  }

  inline MS2MSLogRequest& operator=(const MS2MSLogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MS2MSLogRequest& operator=(MS2MSLogRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MS2MSLogRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MS2MSLogRequest* internal_default_instance() {
    return reinterpret_cast<const MS2MSLogRequest*>(
               &_MS2MSLogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MS2MSLogRequest& a, MS2MSLogRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MS2MSLogRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MS2MSLogRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MS2MSLogRequest* New() const final {
    return CreateMaybeMessage<MS2MSLogRequest>(nullptr);
  }

  MS2MSLogRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MS2MSLogRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MS2MSLogRequest& from);
  void MergeFrom(const MS2MSLogRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MS2MSLogRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mslog_service.MS2MSLogRequest";
  }
  protected:
  explicit MS2MSLogRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_master_5flog_2eproto);
    return ::descriptor_table_master_5flog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsIdFieldNumber = 1,
    kLsnFieldNumber = 2,
  };
  // uint64 ms_id = 1;
  void clear_ms_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 ms_id() const;
  void set_ms_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_ms_id() const;
  void _internal_set_ms_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 lsn = 2;
  void clear_lsn();
  ::PROTOBUF_NAMESPACE_ID::uint64 lsn() const;
  void set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_lsn() const;
  void _internal_set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:mslog_service.MS2MSLogRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 ms_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 lsn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_master_5flog_2eproto;
};
// -------------------------------------------------------------------

class MS2MSLogResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mslog_service.MS2MSLogResponse) */ {
 public:
  inline MS2MSLogResponse() : MS2MSLogResponse(nullptr) {};
  virtual ~MS2MSLogResponse();

  MS2MSLogResponse(const MS2MSLogResponse& from);
  MS2MSLogResponse(MS2MSLogResponse&& from) noexcept
    : MS2MSLogResponse() {
    *this = ::std::move(from);
  }

  inline MS2MSLogResponse& operator=(const MS2MSLogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MS2MSLogResponse& operator=(MS2MSLogResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MS2MSLogResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MS2MSLogResponse* internal_default_instance() {
    return reinterpret_cast<const MS2MSLogResponse*>(
               &_MS2MSLogResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MS2MSLogResponse& a, MS2MSLogResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MS2MSLogResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MS2MSLogResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MS2MSLogResponse* New() const final {
    return CreateMaybeMessage<MS2MSLogResponse>(nullptr);
  }

  MS2MSLogResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MS2MSLogResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MS2MSLogResponse& from);
  void MergeFrom(const MS2MSLogResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MS2MSLogResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mslog_service.MS2MSLogResponse";
  }
  protected:
  explicit MS2MSLogResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_master_5flog_2eproto);
    return ::descriptor_table_master_5flog_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mslog_service.MS2MSLogResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_master_5flog_2eproto;
};
// ===================================================================

class MSLogService_Stub;

class MSLogService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline MSLogService() {};
 public:
  virtual ~MSLogService();

  typedef MSLogService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void WriteLSNToMS(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::mslog_service::MS2MSLogRequest* request,
                       ::mslog_service::MS2MSLogResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MSLogService);
};

class MSLogService_Stub : public MSLogService {
 public:
  MSLogService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  MSLogService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~MSLogService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements MSLogService ------------------------------------------

  void WriteLSNToMS(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::mslog_service::MS2MSLogRequest* request,
                       ::mslog_service::MS2MSLogResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(MSLogService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MS2MSLogRequest

// uint64 ms_id = 1;
inline void MS2MSLogRequest::clear_ms_id() {
  ms_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MS2MSLogRequest::_internal_ms_id() const {
  return ms_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MS2MSLogRequest::ms_id() const {
  // @@protoc_insertion_point(field_get:mslog_service.MS2MSLogRequest.ms_id)
  return _internal_ms_id();
}
inline void MS2MSLogRequest::_internal_set_ms_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  ms_id_ = value;
}
inline void MS2MSLogRequest::set_ms_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_ms_id(value);
  // @@protoc_insertion_point(field_set:mslog_service.MS2MSLogRequest.ms_id)
}

// uint64 lsn = 2;
inline void MS2MSLogRequest::clear_lsn() {
  lsn_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MS2MSLogRequest::_internal_lsn() const {
  return lsn_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MS2MSLogRequest::lsn() const {
  // @@protoc_insertion_point(field_get:mslog_service.MS2MSLogRequest.lsn)
  return _internal_lsn();
}
inline void MS2MSLogRequest::_internal_set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  lsn_ = value;
}
inline void MS2MSLogRequest::set_lsn(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_lsn(value);
  // @@protoc_insertion_point(field_set:mslog_service.MS2MSLogRequest.lsn)
}

// -------------------------------------------------------------------

// MS2MSLogResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mslog_service

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_master_5flog_2eproto
