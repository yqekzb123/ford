// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: glm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_glm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_glm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_glm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_glm_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_glm_2eproto;
namespace glm_service {
class LockID;
class LockIDDefaultTypeInternal;
extern LockIDDefaultTypeInternal _LockID_default_instance_;
class LockRequest;
class LockRequestDefaultTypeInternal;
extern LockRequestDefaultTypeInternal _LockRequest_default_instance_;
class LockResponse;
class LockResponseDefaultTypeInternal;
extern LockResponseDefaultTypeInternal _LockResponse_default_instance_;
class UnLockRequest;
class UnLockRequestDefaultTypeInternal;
extern UnLockRequestDefaultTypeInternal _UnLockRequest_default_instance_;
class UnLockResponse;
class UnLockResponseDefaultTypeInternal;
extern UnLockResponseDefaultTypeInternal _UnLockResponse_default_instance_;
}  // namespace glm_service
PROTOBUF_NAMESPACE_OPEN
template<> ::glm_service::LockID* Arena::CreateMaybeMessage<::glm_service::LockID>(Arena*);
template<> ::glm_service::LockRequest* Arena::CreateMaybeMessage<::glm_service::LockRequest>(Arena*);
template<> ::glm_service::LockResponse* Arena::CreateMaybeMessage<::glm_service::LockResponse>(Arena*);
template<> ::glm_service::UnLockRequest* Arena::CreateMaybeMessage<::glm_service::UnLockRequest>(Arena*);
template<> ::glm_service::UnLockResponse* Arena::CreateMaybeMessage<::glm_service::UnLockResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace glm_service {

// ===================================================================

class LockID PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:glm_service.LockID) */ {
 public:
  inline LockID() : LockID(nullptr) {};
  virtual ~LockID();

  LockID(const LockID& from);
  LockID(LockID&& from) noexcept
    : LockID() {
    *this = ::std::move(from);
  }

  inline LockID& operator=(const LockID& from) {
    CopyFrom(from);
    return *this;
  }
  inline LockID& operator=(LockID&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LockID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LockID* internal_default_instance() {
    return reinterpret_cast<const LockID*>(
               &_LockID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LockID& a, LockID& b) {
    a.Swap(&b);
  }
  inline void Swap(LockID* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LockID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LockID* New() const final {
    return CreateMaybeMessage<LockID>(nullptr);
  }

  LockID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LockID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LockID& from);
  void MergeFrom(const LockID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "glm_service.LockID";
  }
  protected:
  explicit LockID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_glm_2eproto);
    return ::descriptor_table_glm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableIdFieldNumber = 1,
    kPageIdFieldNumber = 2,
  };
  // uint64 table_id = 1;
  void clear_table_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 table_id() const;
  void set_table_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_table_id() const;
  void _internal_set_table_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 page_id = 2;
  void clear_page_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 page_id() const;
  void set_page_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_page_id() const;
  void _internal_set_page_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:glm_service.LockID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 table_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 page_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_glm_2eproto;
};
// -------------------------------------------------------------------

class LockRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:glm_service.LockRequest) */ {
 public:
  inline LockRequest() : LockRequest(nullptr) {};
  virtual ~LockRequest();

  LockRequest(const LockRequest& from);
  LockRequest(LockRequest&& from) noexcept
    : LockRequest() {
    *this = ::std::move(from);
  }

  inline LockRequest& operator=(const LockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LockRequest& operator=(LockRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LockRequest* internal_default_instance() {
    return reinterpret_cast<const LockRequest*>(
               &_LockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LockRequest& a, LockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LockRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LockRequest* New() const final {
    return CreateMaybeMessage<LockRequest>(nullptr);
  }

  LockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LockRequest& from);
  void MergeFrom(const LockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "glm_service.LockRequest";
  }
  protected:
  explicit LockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_glm_2eproto);
    return ::descriptor_table_glm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSharedLockIdFieldNumber = 1,
    kExclusiveLockIdFieldNumber = 2,
  };
  // repeated .glm_service.LockID shared_lock_id = 1;
  int shared_lock_id_size() const;
  private:
  int _internal_shared_lock_id_size() const;
  public:
  void clear_shared_lock_id();
  ::glm_service::LockID* mutable_shared_lock_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glm_service::LockID >*
      mutable_shared_lock_id();
  private:
  const ::glm_service::LockID& _internal_shared_lock_id(int index) const;
  ::glm_service::LockID* _internal_add_shared_lock_id();
  public:
  const ::glm_service::LockID& shared_lock_id(int index) const;
  ::glm_service::LockID* add_shared_lock_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glm_service::LockID >&
      shared_lock_id() const;

  // repeated .glm_service.LockID exclusive_lock_id = 2;
  int exclusive_lock_id_size() const;
  private:
  int _internal_exclusive_lock_id_size() const;
  public:
  void clear_exclusive_lock_id();
  ::glm_service::LockID* mutable_exclusive_lock_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glm_service::LockID >*
      mutable_exclusive_lock_id();
  private:
  const ::glm_service::LockID& _internal_exclusive_lock_id(int index) const;
  ::glm_service::LockID* _internal_add_exclusive_lock_id();
  public:
  const ::glm_service::LockID& exclusive_lock_id(int index) const;
  ::glm_service::LockID* add_exclusive_lock_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glm_service::LockID >&
      exclusive_lock_id() const;

  // @@protoc_insertion_point(class_scope:glm_service.LockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glm_service::LockID > shared_lock_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glm_service::LockID > exclusive_lock_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_glm_2eproto;
};
// -------------------------------------------------------------------

class LockResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:glm_service.LockResponse) */ {
 public:
  inline LockResponse() : LockResponse(nullptr) {};
  virtual ~LockResponse();

  LockResponse(const LockResponse& from);
  LockResponse(LockResponse&& from) noexcept
    : LockResponse() {
    *this = ::std::move(from);
  }

  inline LockResponse& operator=(const LockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LockResponse& operator=(LockResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LockResponse* internal_default_instance() {
    return reinterpret_cast<const LockResponse*>(
               &_LockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LockResponse& a, LockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LockResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LockResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LockResponse* New() const final {
    return CreateMaybeMessage<LockResponse>(nullptr);
  }

  LockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LockResponse& from);
  void MergeFrom(const LockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "glm_service.LockResponse";
  }
  protected:
  explicit LockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_glm_2eproto);
    return ::descriptor_table_glm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSharedFailRequestLocFieldNumber = 1,
    kExclusiveFailRequestLocFieldNumber = 2,
  };
  // int64 shared_fail_request_loc = 1;
  void clear_shared_fail_request_loc();
  ::PROTOBUF_NAMESPACE_ID::int64 shared_fail_request_loc() const;
  void set_shared_fail_request_loc(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_shared_fail_request_loc() const;
  void _internal_set_shared_fail_request_loc(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 exclusive_fail_request_loc = 2;
  void clear_exclusive_fail_request_loc();
  ::PROTOBUF_NAMESPACE_ID::int64 exclusive_fail_request_loc() const;
  void set_exclusive_fail_request_loc(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_exclusive_fail_request_loc() const;
  void _internal_set_exclusive_fail_request_loc(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:glm_service.LockResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 shared_fail_request_loc_;
  ::PROTOBUF_NAMESPACE_ID::int64 exclusive_fail_request_loc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_glm_2eproto;
};
// -------------------------------------------------------------------

class UnLockRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:glm_service.UnLockRequest) */ {
 public:
  inline UnLockRequest() : UnLockRequest(nullptr) {};
  virtual ~UnLockRequest();

  UnLockRequest(const UnLockRequest& from);
  UnLockRequest(UnLockRequest&& from) noexcept
    : UnLockRequest() {
    *this = ::std::move(from);
  }

  inline UnLockRequest& operator=(const UnLockRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnLockRequest& operator=(UnLockRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnLockRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnLockRequest* internal_default_instance() {
    return reinterpret_cast<const UnLockRequest*>(
               &_UnLockRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UnLockRequest& a, UnLockRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UnLockRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnLockRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnLockRequest* New() const final {
    return CreateMaybeMessage<UnLockRequest>(nullptr);
  }

  UnLockRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnLockRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnLockRequest& from);
  void MergeFrom(const UnLockRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnLockRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "glm_service.UnLockRequest";
  }
  protected:
  explicit UnLockRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_glm_2eproto);
    return ::descriptor_table_glm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSharedUnlockIdFieldNumber = 1,
    kExclusiveUnlockIdFieldNumber = 2,
  };
  // repeated .glm_service.LockID shared_unlock_id = 1;
  int shared_unlock_id_size() const;
  private:
  int _internal_shared_unlock_id_size() const;
  public:
  void clear_shared_unlock_id();
  ::glm_service::LockID* mutable_shared_unlock_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glm_service::LockID >*
      mutable_shared_unlock_id();
  private:
  const ::glm_service::LockID& _internal_shared_unlock_id(int index) const;
  ::glm_service::LockID* _internal_add_shared_unlock_id();
  public:
  const ::glm_service::LockID& shared_unlock_id(int index) const;
  ::glm_service::LockID* add_shared_unlock_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glm_service::LockID >&
      shared_unlock_id() const;

  // repeated .glm_service.LockID exclusive_unlock_id = 2;
  int exclusive_unlock_id_size() const;
  private:
  int _internal_exclusive_unlock_id_size() const;
  public:
  void clear_exclusive_unlock_id();
  ::glm_service::LockID* mutable_exclusive_unlock_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glm_service::LockID >*
      mutable_exclusive_unlock_id();
  private:
  const ::glm_service::LockID& _internal_exclusive_unlock_id(int index) const;
  ::glm_service::LockID* _internal_add_exclusive_unlock_id();
  public:
  const ::glm_service::LockID& exclusive_unlock_id(int index) const;
  ::glm_service::LockID* add_exclusive_unlock_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glm_service::LockID >&
      exclusive_unlock_id() const;

  // @@protoc_insertion_point(class_scope:glm_service.UnLockRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glm_service::LockID > shared_unlock_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glm_service::LockID > exclusive_unlock_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_glm_2eproto;
};
// -------------------------------------------------------------------

class UnLockResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:glm_service.UnLockResponse) */ {
 public:
  inline UnLockResponse() : UnLockResponse(nullptr) {};
  virtual ~UnLockResponse();

  UnLockResponse(const UnLockResponse& from);
  UnLockResponse(UnLockResponse&& from) noexcept
    : UnLockResponse() {
    *this = ::std::move(from);
  }

  inline UnLockResponse& operator=(const UnLockResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnLockResponse& operator=(UnLockResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnLockResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnLockResponse* internal_default_instance() {
    return reinterpret_cast<const UnLockResponse*>(
               &_UnLockResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UnLockResponse& a, UnLockResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UnLockResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnLockResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnLockResponse* New() const final {
    return CreateMaybeMessage<UnLockResponse>(nullptr);
  }

  UnLockResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnLockResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnLockResponse& from);
  void MergeFrom(const UnLockResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnLockResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "glm_service.UnLockResponse";
  }
  protected:
  explicit UnLockResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_glm_2eproto);
    return ::descriptor_table_glm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:glm_service.UnLockResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_glm_2eproto;
};
// ===================================================================

class GLMService_Stub;

class GLMService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline GLMService() {};
 public:
  virtual ~GLMService();

  typedef GLMService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void LockPage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::glm_service::LockRequest* request,
                       ::glm_service::LockResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void UnLockPage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::glm_service::UnLockRequest* request,
                       ::glm_service::UnLockResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GLMService);
};

class GLMService_Stub : public GLMService {
 public:
  GLMService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  GLMService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~GLMService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements GLMService ------------------------------------------

  void LockPage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::glm_service::LockRequest* request,
                       ::glm_service::LockResponse* response,
                       ::google::protobuf::Closure* done);
  void UnLockPage(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::glm_service::UnLockRequest* request,
                       ::glm_service::UnLockResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(GLMService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LockID

// uint64 table_id = 1;
inline void LockID::clear_table_id() {
  table_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LockID::_internal_table_id() const {
  return table_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LockID::table_id() const {
  // @@protoc_insertion_point(field_get:glm_service.LockID.table_id)
  return _internal_table_id();
}
inline void LockID::_internal_set_table_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  table_id_ = value;
}
inline void LockID::set_table_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_table_id(value);
  // @@protoc_insertion_point(field_set:glm_service.LockID.table_id)
}

// uint64 page_id = 2;
inline void LockID::clear_page_id() {
  page_id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LockID::_internal_page_id() const {
  return page_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LockID::page_id() const {
  // @@protoc_insertion_point(field_get:glm_service.LockID.page_id)
  return _internal_page_id();
}
inline void LockID::_internal_set_page_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  page_id_ = value;
}
inline void LockID::set_page_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_page_id(value);
  // @@protoc_insertion_point(field_set:glm_service.LockID.page_id)
}

// -------------------------------------------------------------------

// LockRequest

// repeated .glm_service.LockID shared_lock_id = 1;
inline int LockRequest::_internal_shared_lock_id_size() const {
  return shared_lock_id_.size();
}
inline int LockRequest::shared_lock_id_size() const {
  return _internal_shared_lock_id_size();
}
inline void LockRequest::clear_shared_lock_id() {
  shared_lock_id_.Clear();
}
inline ::glm_service::LockID* LockRequest::mutable_shared_lock_id(int index) {
  // @@protoc_insertion_point(field_mutable:glm_service.LockRequest.shared_lock_id)
  return shared_lock_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glm_service::LockID >*
LockRequest::mutable_shared_lock_id() {
  // @@protoc_insertion_point(field_mutable_list:glm_service.LockRequest.shared_lock_id)
  return &shared_lock_id_;
}
inline const ::glm_service::LockID& LockRequest::_internal_shared_lock_id(int index) const {
  return shared_lock_id_.Get(index);
}
inline const ::glm_service::LockID& LockRequest::shared_lock_id(int index) const {
  // @@protoc_insertion_point(field_get:glm_service.LockRequest.shared_lock_id)
  return _internal_shared_lock_id(index);
}
inline ::glm_service::LockID* LockRequest::_internal_add_shared_lock_id() {
  return shared_lock_id_.Add();
}
inline ::glm_service::LockID* LockRequest::add_shared_lock_id() {
  // @@protoc_insertion_point(field_add:glm_service.LockRequest.shared_lock_id)
  return _internal_add_shared_lock_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glm_service::LockID >&
LockRequest::shared_lock_id() const {
  // @@protoc_insertion_point(field_list:glm_service.LockRequest.shared_lock_id)
  return shared_lock_id_;
}

// repeated .glm_service.LockID exclusive_lock_id = 2;
inline int LockRequest::_internal_exclusive_lock_id_size() const {
  return exclusive_lock_id_.size();
}
inline int LockRequest::exclusive_lock_id_size() const {
  return _internal_exclusive_lock_id_size();
}
inline void LockRequest::clear_exclusive_lock_id() {
  exclusive_lock_id_.Clear();
}
inline ::glm_service::LockID* LockRequest::mutable_exclusive_lock_id(int index) {
  // @@protoc_insertion_point(field_mutable:glm_service.LockRequest.exclusive_lock_id)
  return exclusive_lock_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glm_service::LockID >*
LockRequest::mutable_exclusive_lock_id() {
  // @@protoc_insertion_point(field_mutable_list:glm_service.LockRequest.exclusive_lock_id)
  return &exclusive_lock_id_;
}
inline const ::glm_service::LockID& LockRequest::_internal_exclusive_lock_id(int index) const {
  return exclusive_lock_id_.Get(index);
}
inline const ::glm_service::LockID& LockRequest::exclusive_lock_id(int index) const {
  // @@protoc_insertion_point(field_get:glm_service.LockRequest.exclusive_lock_id)
  return _internal_exclusive_lock_id(index);
}
inline ::glm_service::LockID* LockRequest::_internal_add_exclusive_lock_id() {
  return exclusive_lock_id_.Add();
}
inline ::glm_service::LockID* LockRequest::add_exclusive_lock_id() {
  // @@protoc_insertion_point(field_add:glm_service.LockRequest.exclusive_lock_id)
  return _internal_add_exclusive_lock_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glm_service::LockID >&
LockRequest::exclusive_lock_id() const {
  // @@protoc_insertion_point(field_list:glm_service.LockRequest.exclusive_lock_id)
  return exclusive_lock_id_;
}

// -------------------------------------------------------------------

// LockResponse

// int64 shared_fail_request_loc = 1;
inline void LockResponse::clear_shared_fail_request_loc() {
  shared_fail_request_loc_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LockResponse::_internal_shared_fail_request_loc() const {
  return shared_fail_request_loc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LockResponse::shared_fail_request_loc() const {
  // @@protoc_insertion_point(field_get:glm_service.LockResponse.shared_fail_request_loc)
  return _internal_shared_fail_request_loc();
}
inline void LockResponse::_internal_set_shared_fail_request_loc(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  shared_fail_request_loc_ = value;
}
inline void LockResponse::set_shared_fail_request_loc(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_shared_fail_request_loc(value);
  // @@protoc_insertion_point(field_set:glm_service.LockResponse.shared_fail_request_loc)
}

// int64 exclusive_fail_request_loc = 2;
inline void LockResponse::clear_exclusive_fail_request_loc() {
  exclusive_fail_request_loc_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LockResponse::_internal_exclusive_fail_request_loc() const {
  return exclusive_fail_request_loc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LockResponse::exclusive_fail_request_loc() const {
  // @@protoc_insertion_point(field_get:glm_service.LockResponse.exclusive_fail_request_loc)
  return _internal_exclusive_fail_request_loc();
}
inline void LockResponse::_internal_set_exclusive_fail_request_loc(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  exclusive_fail_request_loc_ = value;
}
inline void LockResponse::set_exclusive_fail_request_loc(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_exclusive_fail_request_loc(value);
  // @@protoc_insertion_point(field_set:glm_service.LockResponse.exclusive_fail_request_loc)
}

// -------------------------------------------------------------------

// UnLockRequest

// repeated .glm_service.LockID shared_unlock_id = 1;
inline int UnLockRequest::_internal_shared_unlock_id_size() const {
  return shared_unlock_id_.size();
}
inline int UnLockRequest::shared_unlock_id_size() const {
  return _internal_shared_unlock_id_size();
}
inline void UnLockRequest::clear_shared_unlock_id() {
  shared_unlock_id_.Clear();
}
inline ::glm_service::LockID* UnLockRequest::mutable_shared_unlock_id(int index) {
  // @@protoc_insertion_point(field_mutable:glm_service.UnLockRequest.shared_unlock_id)
  return shared_unlock_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glm_service::LockID >*
UnLockRequest::mutable_shared_unlock_id() {
  // @@protoc_insertion_point(field_mutable_list:glm_service.UnLockRequest.shared_unlock_id)
  return &shared_unlock_id_;
}
inline const ::glm_service::LockID& UnLockRequest::_internal_shared_unlock_id(int index) const {
  return shared_unlock_id_.Get(index);
}
inline const ::glm_service::LockID& UnLockRequest::shared_unlock_id(int index) const {
  // @@protoc_insertion_point(field_get:glm_service.UnLockRequest.shared_unlock_id)
  return _internal_shared_unlock_id(index);
}
inline ::glm_service::LockID* UnLockRequest::_internal_add_shared_unlock_id() {
  return shared_unlock_id_.Add();
}
inline ::glm_service::LockID* UnLockRequest::add_shared_unlock_id() {
  // @@protoc_insertion_point(field_add:glm_service.UnLockRequest.shared_unlock_id)
  return _internal_add_shared_unlock_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glm_service::LockID >&
UnLockRequest::shared_unlock_id() const {
  // @@protoc_insertion_point(field_list:glm_service.UnLockRequest.shared_unlock_id)
  return shared_unlock_id_;
}

// repeated .glm_service.LockID exclusive_unlock_id = 2;
inline int UnLockRequest::_internal_exclusive_unlock_id_size() const {
  return exclusive_unlock_id_.size();
}
inline int UnLockRequest::exclusive_unlock_id_size() const {
  return _internal_exclusive_unlock_id_size();
}
inline void UnLockRequest::clear_exclusive_unlock_id() {
  exclusive_unlock_id_.Clear();
}
inline ::glm_service::LockID* UnLockRequest::mutable_exclusive_unlock_id(int index) {
  // @@protoc_insertion_point(field_mutable:glm_service.UnLockRequest.exclusive_unlock_id)
  return exclusive_unlock_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glm_service::LockID >*
UnLockRequest::mutable_exclusive_unlock_id() {
  // @@protoc_insertion_point(field_mutable_list:glm_service.UnLockRequest.exclusive_unlock_id)
  return &exclusive_unlock_id_;
}
inline const ::glm_service::LockID& UnLockRequest::_internal_exclusive_unlock_id(int index) const {
  return exclusive_unlock_id_.Get(index);
}
inline const ::glm_service::LockID& UnLockRequest::exclusive_unlock_id(int index) const {
  // @@protoc_insertion_point(field_get:glm_service.UnLockRequest.exclusive_unlock_id)
  return _internal_exclusive_unlock_id(index);
}
inline ::glm_service::LockID* UnLockRequest::_internal_add_exclusive_unlock_id() {
  return exclusive_unlock_id_.Add();
}
inline ::glm_service::LockID* UnLockRequest::add_exclusive_unlock_id() {
  // @@protoc_insertion_point(field_add:glm_service.UnLockRequest.exclusive_unlock_id)
  return _internal_add_exclusive_unlock_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::glm_service::LockID >&
UnLockRequest::exclusive_unlock_id() const {
  // @@protoc_insertion_point(field_list:glm_service.UnLockRequest.exclusive_unlock_id)
  return exclusive_unlock_id_;
}

// -------------------------------------------------------------------

// UnLockResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace glm_service

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_glm_2eproto
